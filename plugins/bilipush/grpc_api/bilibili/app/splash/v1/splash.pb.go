// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_api/bilibili/app/splash/v1/splash.proto

package bilibili_app_splash_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
type ShowStrategy struct {
	//
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//
	Stime int64 `protobuf:"varint,2,opt,name=stime,proto3" json:"stime,omitempty"`
	//
	Etime                int64    `protobuf:"varint,3,opt,name=etime,proto3" json:"etime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShowStrategy) Reset()         { *m = ShowStrategy{} }
func (m *ShowStrategy) String() string { return proto.CompactTextString(m) }
func (*ShowStrategy) ProtoMessage()    {}
func (*ShowStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_94b1f1eac4699803, []int{0}
}

func (m *ShowStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShowStrategy.Unmarshal(m, b)
}
func (m *ShowStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShowStrategy.Marshal(b, m, deterministic)
}
func (m *ShowStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowStrategy.Merge(m, src)
}
func (m *ShowStrategy) XXX_Size() int {
	return xxx_messageInfo_ShowStrategy.Size(m)
}
func (m *ShowStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_ShowStrategy proto.InternalMessageInfo

func (m *ShowStrategy) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShowStrategy) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *ShowStrategy) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

//
type SplashItem struct {
	//
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	//
	CardType int32 `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	//
	Duration int32 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	//
	BeginTime int64 `protobuf:"varint,5,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	//
	EndTime int64 `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//
	Thumb string `protobuf:"bytes,7,opt,name=thumb,proto3" json:"thumb,omitempty"`
	//
	Hash string `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	//
	LogoUrl string `protobuf:"bytes,9,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	//
	LogoHash string `protobuf:"bytes,10,opt,name=logo_hash,json=logoHash,proto3" json:"logo_hash,omitempty"`
	//
	VideoUrl string `protobuf:"bytes,11,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	//
	VideoHash string `protobuf:"bytes,12,opt,name=video_hash,json=videoHash,proto3" json:"video_hash,omitempty"`
	//
	VideoWidth int32 `protobuf:"varint,13,opt,name=video_width,json=videoWidth,proto3" json:"video_width,omitempty"`
	//
	VideoHeight int32 `protobuf:"varint,14,opt,name=video_height,json=videoHeight,proto3" json:"video_height,omitempty"`
	//
	Schema string `protobuf:"bytes,15,opt,name=schema,proto3" json:"schema,omitempty"`
	//
	SchemaTitle string `protobuf:"bytes,16,opt,name=schema_title,json=schemaTitle,proto3" json:"schema_title,omitempty"`
	//
	SchemaPackageName string `protobuf:"bytes,17,opt,name=schema_package_name,json=schemaPackageName,proto3" json:"schema_package_name,omitempty"`
	//
	SchemaCallupWhiteList []string `protobuf:"bytes,18,rep,name=schema_callup_whiteList,json=schemaCallupWhiteList,proto3" json:"schema_callup_whiteList,omitempty"`
	//
	Skip int32 `protobuf:"varint,19,opt,name=skip,proto3" json:"skip,omitempty"`
	//
	Uri string `protobuf:"bytes,20,opt,name=uri,proto3" json:"uri,omitempty"`
	//
	UriTitle string `protobuf:"bytes,21,opt,name=uri_title,json=uriTitle,proto3" json:"uri_title,omitempty"`
	//
	Source int32 `protobuf:"varint,22,opt,name=source,proto3" json:"source,omitempty"`
	//
	CmMark int32 `protobuf:"varint,23,opt,name=cm_mark,json=cmMark,proto3" json:"cm_mark,omitempty"`
	//
	AdCb string `protobuf:"bytes,24,opt,name=ad_cb,json=adCb,proto3" json:"ad_cb,omitempty"`
	//
	ResourceId int64 `protobuf:"varint,25,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	//
	RequestId string `protobuf:"bytes,26,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	//
	ClientIp string `protobuf:"bytes,27,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	//
	IsAd bool `protobuf:"varint,28,opt,name=is_ad,json=isAd,proto3" json:"is_ad,omitempty"`
	//
	IsAdLoc bool `protobuf:"varint,29,opt,name=is_ad_loc,json=isAdLoc,proto3" json:"is_ad_loc,omitempty"`
	//
	Extra *anypb.Any `protobuf:"bytes,30,opt,name=extra,proto3" json:"extra,omitempty"`
	//
	CardIndex int64 `protobuf:"varint,31,opt,name=card_index,json=cardIndex,proto3" json:"card_index,omitempty"`
	//
	ServerType int64 `protobuf:"varint,32,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	//
	Index int64 `protobuf:"varint,33,opt,name=index,proto3" json:"index,omitempty"`
	//
	ClickUrl string `protobuf:"bytes,34,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	//
	ShowUrl string `protobuf:"bytes,35,opt,name=show_url,json=showUrl,proto3" json:"show_url,omitempty"`
	//
	TimeTarget int32 `protobuf:"varint,36,opt,name=time_target,json=timeTarget,proto3" json:"time_target,omitempty"`
	//
	Encryption int32 `protobuf:"varint,37,opt,name=encryption,proto3" json:"encryption,omitempty"`
	//
	EnablePreDownload bool `protobuf:"varint,38,opt,name=enable_pre_download,json=enablePreDownload,proto3" json:"enable_pre_download,omitempty"`
	//
	EnableBackgroundDownload bool     `protobuf:"varint,39,opt,name=enable_background_download,json=enableBackgroundDownload,proto3" json:"enable_background_download,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *SplashItem) Reset()         { *m = SplashItem{} }
func (m *SplashItem) String() string { return proto.CompactTextString(m) }
func (*SplashItem) ProtoMessage()    {}
func (*SplashItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_94b1f1eac4699803, []int{1}
}

func (m *SplashItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplashItem.Unmarshal(m, b)
}
func (m *SplashItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplashItem.Marshal(b, m, deterministic)
}
func (m *SplashItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashItem.Merge(m, src)
}
func (m *SplashItem) XXX_Size() int {
	return xxx_messageInfo_SplashItem.Size(m)
}
func (m *SplashItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashItem.DiscardUnknown(m)
}

var xxx_messageInfo_SplashItem proto.InternalMessageInfo

func (m *SplashItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SplashItem) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SplashItem) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *SplashItem) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SplashItem) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *SplashItem) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SplashItem) GetThumb() string {
	if m != nil {
		return m.Thumb
	}
	return ""
}

func (m *SplashItem) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *SplashItem) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

func (m *SplashItem) GetLogoHash() string {
	if m != nil {
		return m.LogoHash
	}
	return ""
}

func (m *SplashItem) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *SplashItem) GetVideoHash() string {
	if m != nil {
		return m.VideoHash
	}
	return ""
}

func (m *SplashItem) GetVideoWidth() int32 {
	if m != nil {
		return m.VideoWidth
	}
	return 0
}

func (m *SplashItem) GetVideoHeight() int32 {
	if m != nil {
		return m.VideoHeight
	}
	return 0
}

func (m *SplashItem) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *SplashItem) GetSchemaTitle() string {
	if m != nil {
		return m.SchemaTitle
	}
	return ""
}

func (m *SplashItem) GetSchemaPackageName() string {
	if m != nil {
		return m.SchemaPackageName
	}
	return ""
}

func (m *SplashItem) GetSchemaCallupWhiteList() []string {
	if m != nil {
		return m.SchemaCallupWhiteList
	}
	return nil
}

func (m *SplashItem) GetSkip() int32 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *SplashItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SplashItem) GetUriTitle() string {
	if m != nil {
		return m.UriTitle
	}
	return ""
}

func (m *SplashItem) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *SplashItem) GetCmMark() int32 {
	if m != nil {
		return m.CmMark
	}
	return 0
}

func (m *SplashItem) GetAdCb() string {
	if m != nil {
		return m.AdCb
	}
	return ""
}

func (m *SplashItem) GetResourceId() int64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *SplashItem) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SplashItem) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *SplashItem) GetIsAd() bool {
	if m != nil {
		return m.IsAd
	}
	return false
}

func (m *SplashItem) GetIsAdLoc() bool {
	if m != nil {
		return m.IsAdLoc
	}
	return false
}

func (m *SplashItem) GetExtra() *anypb.Any {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *SplashItem) GetCardIndex() int64 {
	if m != nil {
		return m.CardIndex
	}
	return 0
}

func (m *SplashItem) GetServerType() int64 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *SplashItem) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SplashItem) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *SplashItem) GetShowUrl() string {
	if m != nil {
		return m.ShowUrl
	}
	return ""
}

func (m *SplashItem) GetTimeTarget() int32 {
	if m != nil {
		return m.TimeTarget
	}
	return 0
}

func (m *SplashItem) GetEncryption() int32 {
	if m != nil {
		return m.Encryption
	}
	return 0
}

func (m *SplashItem) GetEnablePreDownload() bool {
	if m != nil {
		return m.EnablePreDownload
	}
	return false
}

func (m *SplashItem) GetEnableBackgroundDownload() bool {
	if m != nil {
		return m.EnableBackgroundDownload
	}
	return false
}

//-响应
type SplashReply struct {
	//
	MaxTime int32 `protobuf:"varint,1,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	//
	MinInterval int32 `protobuf:"varint,2,opt,name=min_interval,json=minInterval,proto3" json:"min_interval,omitempty"`
	//
	PullInterval int32 `protobuf:"varint,3,opt,name=pull_interval,json=pullInterval,proto3" json:"pull_interval,omitempty"`
	//
	List []*SplashItem `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	//
	Show                 []*ShowStrategy `protobuf:"bytes,5,rep,name=show,proto3" json:"show,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SplashReply) Reset()         { *m = SplashReply{} }
func (m *SplashReply) String() string { return proto.CompactTextString(m) }
func (*SplashReply) ProtoMessage()    {}
func (*SplashReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_94b1f1eac4699803, []int{2}
}

func (m *SplashReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplashReply.Unmarshal(m, b)
}
func (m *SplashReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplashReply.Marshal(b, m, deterministic)
}
func (m *SplashReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashReply.Merge(m, src)
}
func (m *SplashReply) XXX_Size() int {
	return xxx_messageInfo_SplashReply.Size(m)
}
func (m *SplashReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashReply.DiscardUnknown(m)
}

var xxx_messageInfo_SplashReply proto.InternalMessageInfo

func (m *SplashReply) GetMaxTime() int32 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *SplashReply) GetMinInterval() int32 {
	if m != nil {
		return m.MinInterval
	}
	return 0
}

func (m *SplashReply) GetPullInterval() int32 {
	if m != nil {
		return m.PullInterval
	}
	return 0
}

func (m *SplashReply) GetList() []*SplashItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SplashReply) GetShow() []*ShowStrategy {
	if m != nil {
		return m.Show
	}
	return nil
}

//-请求
type SplashReq struct {
	//
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	//
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	//
	Birth string `protobuf:"bytes,3,opt,name=birth,proto3" json:"birth,omitempty"`
	//
	AdExtra string `protobuf:"bytes,4,opt,name=ad_extra,json=adExtra,proto3" json:"ad_extra,omitempty"`
	//
	Network              string   `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplashReq) Reset()         { *m = SplashReq{} }
func (m *SplashReq) String() string { return proto.CompactTextString(m) }
func (*SplashReq) ProtoMessage()    {}
func (*SplashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_94b1f1eac4699803, []int{3}
}

func (m *SplashReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplashReq.Unmarshal(m, b)
}
func (m *SplashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplashReq.Marshal(b, m, deterministic)
}
func (m *SplashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashReq.Merge(m, src)
}
func (m *SplashReq) XXX_Size() int {
	return xxx_messageInfo_SplashReq.Size(m)
}
func (m *SplashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashReq.DiscardUnknown(m)
}

var xxx_messageInfo_SplashReq proto.InternalMessageInfo

func (m *SplashReq) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *SplashReq) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SplashReq) GetBirth() string {
	if m != nil {
		return m.Birth
	}
	return ""
}

func (m *SplashReq) GetAdExtra() string {
	if m != nil {
		return m.AdExtra
	}
	return ""
}

func (m *SplashReq) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func init() {
	proto.RegisterType((*ShowStrategy)(nil), "bilibili.app.splash.v1.ShowStrategy")
	proto.RegisterType((*SplashItem)(nil), "bilibili.app.splash.v1.SplashItem")
	proto.RegisterType((*SplashReply)(nil), "bilibili.app.splash.v1.SplashReply")
	proto.RegisterType((*SplashReq)(nil), "bilibili.app.splash.v1.SplashReq")
}

func init() {
	proto.RegisterFile("grpc_api/bilibili/app/splash/v1/splash.proto", fileDescriptor_94b1f1eac4699803)
}

var fileDescriptor_94b1f1eac4699803 = []byte{
	// 944 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x97, 0x6b, 0x3b, 0xf6, 0x8d, 0xd3, 0xd2, 0x6c, 0xd2, 0x64, 0xe3, 0x90, 0xc6, 0x71, 0x0a,
	0x58, 0x08, 0xd9, 0x6a, 0x90, 0x2a, 0x1e, 0x78, 0x29, 0x05, 0xa9, 0x46, 0xa5, 0xaa, 0x2e, 0x41,
	0xe5, 0xed, 0xb4, 0xbe, 0x5d, 0x7c, 0x2b, 0xdf, 0xbf, 0xec, 0xed, 0xc5, 0xf1, 0x3b, 0x1f, 0x86,
	0xcf, 0xc5, 0x27, 0x41, 0x33, 0x73, 0x4e, 0x90, 0xf8, 0xf7, 0x60, 0x69, 0xe7, 0xf7, 0x67, 0x3d,
	0xb3, 0x37, 0x33, 0xf0, 0xd5, 0xd2, 0x95, 0x71, 0xa4, 0x4a, 0x3b, 0x5b, 0xd8, 0xd4, 0xe2, 0x6f,
	0xa6, 0xca, 0x72, 0x56, 0x95, 0xa9, 0xaa, 0x92, 0xd9, 0xed, 0xcb, 0xe6, 0x34, 0x2d, 0x5d, 0xe1,
	0x0b, 0x71, 0xb8, 0x15, 0x4d, 0x55, 0x59, 0x4e, 0x1b, 0xea, 0xf6, 0xe5, 0xf0, 0x78, 0x59, 0x14,
	0xcb, 0xd4, 0xcc, 0x48, 0xb5, 0xa8, 0x7f, 0x9d, 0xa9, 0x7c, 0xc3, 0x96, 0xf1, 0x8f, 0xb0, 0x7b,
	0x95, 0x14, 0xeb, 0x2b, 0xef, 0x94, 0x37, 0xcb, 0x8d, 0x78, 0x02, 0x8f, 0xac, 0x96, 0xad, 0x51,
	0x6b, 0xd2, 0x0d, 0x1f, 0x59, 0x2d, 0x0e, 0xa0, 0x5b, 0x79, 0x9b, 0x19, 0xf9, 0x68, 0xd4, 0x9a,
	0xb4, 0x43, 0x0e, 0x10, 0x35, 0x84, 0xb6, 0x19, 0xa5, 0x60, 0xfc, 0x7b, 0x00, 0x70, 0x45, 0x7f,
	0x3a, 0xf7, 0x26, 0xfb, 0xdb, 0x55, 0x02, 0x3a, 0x7e, 0x53, 0xf2, 0x4d, 0xdd, 0x90, 0xce, 0xe2,
	0x04, 0x82, 0x58, 0x39, 0x1d, 0x11, 0xd1, 0x26, 0xa2, 0x8f, 0xc0, 0x35, 0x92, 0x43, 0xe8, 0xeb,
	0xda, 0x29, 0x6f, 0x8b, 0x5c, 0x76, 0x98, 0xdb, 0xc6, 0xe2, 0x14, 0x60, 0x61, 0x96, 0x36, 0x8f,
	0x28, 0x8d, 0x2e, 0xa5, 0x11, 0x10, 0x72, 0x8d, 0x09, 0x1e, 0x43, 0xdf, 0xe4, 0x9a, 0xc9, 0x1d,
	0x22, 0x7b, 0x26, 0xd7, 0xd7, 0x4d, 0xee, 0x3e, 0xa9, 0xb3, 0x85, 0xec, 0x8d, 0x5a, 0x93, 0x20,
	0xe4, 0x00, 0x93, 0x4b, 0x54, 0x95, 0xc8, 0x3e, 0x81, 0x74, 0xc6, 0x4b, 0xd2, 0x62, 0x59, 0x44,
	0xb5, 0x4b, 0x65, 0x40, 0x78, 0x0f, 0xe3, 0x9f, 0x5d, 0x8a, 0x79, 0x13, 0x45, 0x1e, 0x20, 0x8e,
	0xb4, 0x6f, 0xd1, 0x77, 0x02, 0xc1, 0xad, 0xd5, 0x86, 0x8d, 0x03, 0x26, 0x09, 0x40, 0xe7, 0x29,
	0x00, 0x93, 0x64, 0xdd, 0x25, 0x96, 0xe5, 0xe4, 0x3d, 0x83, 0x01, 0xd3, 0x6b, 0xab, 0x7d, 0x22,
	0x1f, 0x53, 0xd9, 0xec, 0xf8, 0x88, 0x88, 0x38, 0x87, 0xdd, 0xc6, 0x6f, 0xec, 0x32, 0xf1, 0xf2,
	0x09, 0x29, 0xd8, 0xf4, 0x96, 0x20, 0x71, 0x08, 0x3b, 0x55, 0x9c, 0x98, 0x4c, 0xc9, 0x4f, 0xe8,
	0xfa, 0x26, 0x42, 0x2b, 0x9f, 0x22, 0x6f, 0x7d, 0x6a, 0xe4, 0x53, 0x62, 0x07, 0x8c, 0x5d, 0x23,
	0x24, 0xa6, 0xb0, 0xdf, 0x48, 0x4a, 0x15, 0xaf, 0xd4, 0xd2, 0x44, 0xb9, 0xca, 0x8c, 0xdc, 0x23,
	0xe5, 0x1e, 0x53, 0x1f, 0x98, 0x79, 0xaf, 0x32, 0x23, 0x5e, 0xc1, 0x51, 0xa3, 0x8f, 0x55, 0x9a,
	0xd6, 0x65, 0xb4, 0x4e, 0xac, 0x37, 0xef, 0x6c, 0xe5, 0xa5, 0x18, 0xb5, 0x27, 0x41, 0xf8, 0x8c,
	0xe9, 0x37, 0xc4, 0x7e, 0xdc, 0x92, 0xf8, 0xdc, 0xd5, 0xca, 0x96, 0x72, 0x9f, 0x7b, 0x01, 0xcf,
	0xe2, 0x29, 0xb4, 0x6b, 0x67, 0xe5, 0x01, 0xfd, 0x17, 0x1e, 0xf1, 0x21, 0x6b, 0x67, 0x9b, 0x6c,
	0x9f, 0xf1, 0x43, 0xd6, 0xce, 0x72, 0xaa, 0x58, 0x65, 0x51, 0xbb, 0xd8, 0xc8, 0x43, 0xba, 0xa4,
	0x89, 0xc4, 0x11, 0xf4, 0xe2, 0x2c, 0xca, 0x94, 0x5b, 0xc9, 0x23, 0x26, 0xe2, 0xec, 0x27, 0xe5,
	0x56, 0x62, 0x1f, 0xba, 0x4a, 0x47, 0xf1, 0x42, 0x4a, 0xfe, 0xc6, 0x4a, 0xbf, 0x59, 0xe0, 0x7b,
	0x3b, 0xc3, 0xce, 0xc8, 0x6a, 0x79, 0x4c, 0xbd, 0x02, 0x5b, 0x68, 0xae, 0xf1, 0x7b, 0x39, 0x73,
	0x53, 0x9b, 0xca, 0x23, 0x3f, 0xe4, 0xef, 0xd5, 0x20, 0x73, 0x4d, 0x0d, 0x9c, 0x5a, 0x93, 0xfb,
	0xc8, 0x96, 0xf2, 0x84, 0x53, 0x64, 0x60, 0x5e, 0xe2, 0x3f, 0xda, 0x2a, 0x52, 0x5a, 0x7e, 0x3a,
	0x6a, 0x4d, 0xfa, 0x61, 0xc7, 0x56, 0xaf, 0xb5, 0x18, 0x42, 0x40, 0x60, 0x94, 0x16, 0xb1, 0x3c,
	0x25, 0xa2, 0x87, 0xc4, 0xbb, 0x22, 0x16, 0x5f, 0x42, 0xd7, 0xdc, 0x79, 0xa7, 0xe4, 0xf3, 0x51,
	0x6b, 0x32, 0xb8, 0x3c, 0x98, 0xf2, 0xe0, 0x4e, 0xb7, 0x83, 0x3b, 0x7d, 0x9d, 0x6f, 0x42, 0x96,
	0x60, 0x62, 0x34, 0x3a, 0x36, 0xd7, 0xe6, 0x4e, 0x9e, 0xf1, 0x04, 0x20, 0x32, 0x47, 0x00, 0x0b,
	0xab, 0x8c, 0xbb, 0x35, 0x8e, 0x67, 0x6b, 0xc4, 0x85, 0x31, 0x44, 0xd3, 0x75, 0x00, 0x5d, 0xb6,
	0x9e, 0xf3, 0x0c, 0x53, 0xd0, 0xd4, 0x13, 0xaf, 0xa8, 0x77, 0xc7, 0xf7, 0xf5, 0xc4, 0x2b, 0xec,
	0xdd, 0x63, 0xe8, 0x57, 0x49, 0xb1, 0x26, 0xee, 0x82, 0x07, 0x02, 0x63, 0xa4, 0xce, 0x60, 0x80,
	0xc3, 0x16, 0x79, 0xe5, 0x96, 0xc6, 0xcb, 0x17, 0xdc, 0xb7, 0x08, 0x5d, 0x13, 0x22, 0x9e, 0x03,
	0x98, 0x3c, 0x76, 0x9b, 0x92, 0xc6, 0xf9, 0x33, 0xe6, 0x1f, 0x10, 0xec, 0x3c, 0x93, 0xab, 0x45,
	0x6a, 0xa2, 0xd2, 0x99, 0x48, 0x17, 0xeb, 0x3c, 0x2d, 0x94, 0x96, 0x9f, 0xd3, 0x03, 0xed, 0x31,
	0xf5, 0xc1, 0x99, 0xef, 0x1b, 0x42, 0x7c, 0x0b, 0xc3, 0x46, 0xbf, 0x50, 0xf1, 0x6a, 0xe9, 0x8a,
	0x3a, 0xd7, 0x0f, 0xb6, 0x2f, 0xc8, 0x26, 0x59, 0xf1, 0xdd, 0xbd, 0x60, 0xeb, 0x1e, 0xff, 0xd1,
	0x82, 0x01, 0xaf, 0xaa, 0xd0, 0x94, 0xe9, 0x06, 0x2b, 0xcb, 0xd4, 0x1d, 0xef, 0x0b, 0xde, 0x58,
	0xbd, 0x4c, 0xdd, 0xd1, 0xbe, 0x38, 0x87, 0xdd, 0xcc, 0xe6, 0x91, 0xcd, 0xbd, 0x71, 0xb7, 0x2a,
	0x6d, 0xd6, 0xd7, 0x20, 0xb3, 0xf9, 0xbc, 0x81, 0xc4, 0x05, 0x3c, 0x2e, 0xeb, 0x34, 0x7d, 0xd0,
	0xf0, 0x26, 0xdb, 0x45, 0xf0, 0x5e, 0xf4, 0x0a, 0x3a, 0x29, 0xce, 0x45, 0x67, 0xd4, 0x9e, 0x0c,
	0x2e, 0xc7, 0xd3, 0x7f, 0xde, 0xd5, 0xd3, 0x87, 0x05, 0x1a, 0x92, 0x5e, 0x7c, 0x03, 0x1d, 0x7c,
	0x64, 0xd9, 0x25, 0xdf, 0x8b, 0x7f, 0xf5, 0xfd, 0x65, 0x8b, 0x87, 0xe4, 0x18, 0xff, 0xd6, 0x82,
	0x60, 0x5b, 0xe4, 0x0d, 0x7e, 0x6f, 0xde, 0x29, 0x5c, 0x1f, 0x07, 0x38, 0x45, 0xcd, 0x22, 0xe1,
	0xba, 0x9a, 0x08, 0xd5, 0x0b, 0xeb, 0x7c, 0x42, 0xa5, 0x04, 0x21, 0x07, 0xf8, 0x4c, 0x4a, 0x47,
	0xdc, 0xa2, 0x1d, 0x6e, 0x00, 0xa5, 0x7f, 0xa0, 0x76, 0x94, 0xd0, 0xcb, 0x8d, 0x5f, 0x17, 0x6e,
	0x45, 0xdb, 0x38, 0x08, 0xb7, 0xe1, 0xe5, 0x2f, 0xb0, 0xc3, 0x59, 0x88, 0xf7, 0xd0, 0xa1, 0xe9,
	0x3f, 0xff, 0xef, 0xe2, 0x43, 0x73, 0x33, 0xbc, 0xf8, 0x3f, 0x49, 0x99, 0x6e, 0x16, 0x3b, 0x34,
	0x17, 0x5f, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x5a, 0x48, 0x66, 0x26, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SplashClient is the client API for Splash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SplashClient interface {
	//
	List(ctx context.Context, in *SplashReq, opts ...grpc.CallOption) (*SplashReply, error)
}

type splashClient struct {
	cc *grpc.ClientConn
}

func NewSplashClient(cc *grpc.ClientConn) SplashClient {
	return &splashClient{cc}
}

func (c *splashClient) List(ctx context.Context, in *SplashReq, opts ...grpc.CallOption) (*SplashReply, error) {
	out := new(SplashReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.splash.v1.Splash/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplashServer is the server API for Splash service.
type SplashServer interface {
	//
	List(context.Context, *SplashReq) (*SplashReply, error)
}

// UnimplementedSplashServer can be embedded to have forward compatible implementations.
type UnimplementedSplashServer struct {
}

func (*UnimplementedSplashServer) List(ctx context.Context, req *SplashReq) (*SplashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterSplashServer(s *grpc.Server, srv SplashServer) {
	s.RegisterService(&_Splash_serviceDesc, srv)
}

func _Splash_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplashServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.splash.v1.Splash/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplashServer).List(ctx, req.(*SplashReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Splash_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.splash.v1.Splash",
	HandlerType: (*SplashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Splash_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api/bilibili/app/splash/v1/splash.proto",
}
