// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_api/bilibili/broadcast/message/tv/proj.proto

package bilibili_broadcast_message_tv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 投屏
type ProjReply struct {
	// 投屏命令
	// 1:起播 2:快进 3:快退 4:seek播放进度 5:暂停 6:暂停恢复
	CmdType int64 `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	// 用户id
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// 稿件id
	Aid int64 `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频id
	Cid int64 `protobuf:"varint,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// 视频类型
	// 0:ugc 1:pgc 2:pugv
	VideoType int64 `protobuf:"varint,5,opt,name=video_type,json=videoType,proto3" json:"video_type,omitempty"`
	// 单集id，pgc和pugv需要传
	EpId int64 `protobuf:"varint,6,opt,name=ep_id,json=epId,proto3" json:"ep_id,omitempty"`
	// 剧集id
	SeasonId int64 `protobuf:"varint,7,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	// seek 的位置，cmd位seek时有值，单位秒
	SeekTs int64 `protobuf:"varint,8,opt,name=seek_ts,json=seekTs,proto3" json:"seek_ts,omitempty"`
	// 其他指令对应内容
	Extra                string   `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjReply) Reset()         { *m = ProjReply{} }
func (m *ProjReply) String() string { return proto.CompactTextString(m) }
func (*ProjReply) ProtoMessage()    {}
func (*ProjReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_80825b1fd5520fde, []int{0}
}

func (m *ProjReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjReply.Unmarshal(m, b)
}
func (m *ProjReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjReply.Marshal(b, m, deterministic)
}
func (m *ProjReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjReply.Merge(m, src)
}
func (m *ProjReply) XXX_Size() int {
	return xxx_messageInfo_ProjReply.Size(m)
}
func (m *ProjReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProjReply proto.InternalMessageInfo

func (m *ProjReply) GetCmdType() int64 {
	if m != nil {
		return m.CmdType
	}
	return 0
}

func (m *ProjReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ProjReply) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ProjReply) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ProjReply) GetVideoType() int64 {
	if m != nil {
		return m.VideoType
	}
	return 0
}

func (m *ProjReply) GetEpId() int64 {
	if m != nil {
		return m.EpId
	}
	return 0
}

func (m *ProjReply) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *ProjReply) GetSeekTs() int64 {
	if m != nil {
		return m.SeekTs
	}
	return 0
}

func (m *ProjReply) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

// 直播状态
type LiveStatusNotify struct {
	// 直播状态
	// 1:开播 2:关播 3:截流 4:截流恢复
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 文案
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 直播房间号
	Cid                  int64    `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveStatusNotify) Reset()         { *m = LiveStatusNotify{} }
func (m *LiveStatusNotify) String() string { return proto.CompactTextString(m) }
func (*LiveStatusNotify) ProtoMessage()    {}
func (*LiveStatusNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_80825b1fd5520fde, []int{1}
}

func (m *LiveStatusNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveStatusNotify.Unmarshal(m, b)
}
func (m *LiveStatusNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveStatusNotify.Marshal(b, m, deterministic)
}
func (m *LiveStatusNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveStatusNotify.Merge(m, src)
}
func (m *LiveStatusNotify) XXX_Size() int {
	return xxx_messageInfo_LiveStatusNotify.Size(m)
}
func (m *LiveStatusNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveStatusNotify.DiscardUnknown(m)
}

var xxx_messageInfo_LiveStatusNotify proto.InternalMessageInfo

func (m *LiveStatusNotify) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LiveStatusNotify) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LiveStatusNotify) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

//
type EsportsNotify struct {
	// 直播房间号
	Cid                  int64    `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EsportsNotify) Reset()         { *m = EsportsNotify{} }
func (m *EsportsNotify) String() string { return proto.CompactTextString(m) }
func (*EsportsNotify) ProtoMessage()    {}
func (*EsportsNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_80825b1fd5520fde, []int{2}
}

func (m *EsportsNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EsportsNotify.Unmarshal(m, b)
}
func (m *EsportsNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EsportsNotify.Marshal(b, m, deterministic)
}
func (m *EsportsNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsportsNotify.Merge(m, src)
}
func (m *EsportsNotify) XXX_Size() int {
	return xxx_messageInfo_EsportsNotify.Size(m)
}
func (m *EsportsNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_EsportsNotify.DiscardUnknown(m)
}

var xxx_messageInfo_EsportsNotify proto.InternalMessageInfo

func (m *EsportsNotify) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// 直播插卡
type PublicityNotify struct {
	// 插卡id
	PublicityId int64 `protobuf:"varint,1,opt,name=publicity_id,json=publicityId,proto3" json:"publicity_id,omitempty"`
	// 直播房间号
	RoomId int64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 直播间状态
	// 0:未开播 1:直播中 2:轮播中
	Status               int64    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicityNotify) Reset()         { *m = PublicityNotify{} }
func (m *PublicityNotify) String() string { return proto.CompactTextString(m) }
func (*PublicityNotify) ProtoMessage()    {}
func (*PublicityNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_80825b1fd5520fde, []int{3}
}

func (m *PublicityNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicityNotify.Unmarshal(m, b)
}
func (m *PublicityNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicityNotify.Marshal(b, m, deterministic)
}
func (m *PublicityNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicityNotify.Merge(m, src)
}
func (m *PublicityNotify) XXX_Size() int {
	return xxx_messageInfo_PublicityNotify.Size(m)
}
func (m *PublicityNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicityNotify.DiscardUnknown(m)
}

var xxx_messageInfo_PublicityNotify proto.InternalMessageInfo

func (m *PublicityNotify) GetPublicityId() int64 {
	if m != nil {
		return m.PublicityId
	}
	return 0
}

func (m *PublicityNotify) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *PublicityNotify) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 直转点
type LiveSkipNotify struct {
	// 直播id
	LiveId               int64    `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveSkipNotify) Reset()         { *m = LiveSkipNotify{} }
func (m *LiveSkipNotify) String() string { return proto.CompactTextString(m) }
func (*LiveSkipNotify) ProtoMessage()    {}
func (*LiveSkipNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_80825b1fd5520fde, []int{4}
}

func (m *LiveSkipNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiveSkipNotify.Unmarshal(m, b)
}
func (m *LiveSkipNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiveSkipNotify.Marshal(b, m, deterministic)
}
func (m *LiveSkipNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveSkipNotify.Merge(m, src)
}
func (m *LiveSkipNotify) XXX_Size() int {
	return xxx_messageInfo_LiveSkipNotify.Size(m)
}
func (m *LiveSkipNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveSkipNotify.DiscardUnknown(m)
}

var xxx_messageInfo_LiveSkipNotify proto.InternalMessageInfo

func (m *LiveSkipNotify) GetLiveId() int64 {
	if m != nil {
		return m.LiveId
	}
	return 0
}

func init() {
	proto.RegisterType((*ProjReply)(nil), "bilibili.broadcast.message.tv.ProjReply")
	proto.RegisterType((*LiveStatusNotify)(nil), "bilibili.broadcast.message.tv.LiveStatusNotify")
	proto.RegisterType((*EsportsNotify)(nil), "bilibili.broadcast.message.tv.EsportsNotify")
	proto.RegisterType((*PublicityNotify)(nil), "bilibili.broadcast.message.tv.PublicityNotify")
	proto.RegisterType((*LiveSkipNotify)(nil), "bilibili.broadcast.message.tv.LiveSkipNotify")
}

func init() {
	proto.RegisterFile("grpc_api/bilibili/broadcast/message/tv/proj.proto", fileDescriptor_80825b1fd5520fde)
}

var fileDescriptor_80825b1fd5520fde = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x95, 0x97, 0x36, 0x69, 0x2e, 0x5f, 0x93, 0x41, 0x5b, 0xd8, 0x34, 0x69, 0xeb, 0xaf, 0x22,
	0x81, 0x13, 0xe0, 0x19, 0xf6, 0xa3, 0x08, 0x4d, 0xa3, 0x2b, 0xe2, 0x67, 0x94, 0xc4, 0x5e, 0xe4,
	0x2d, 0xc1, 0x56, 0xec, 0x46, 0xe4, 0x8d, 0x78, 0x28, 0x1e, 0x06, 0xd9, 0x4e, 0xd2, 0x0d, 0xa9,
	0x74, 0x3f, 0x22, 0xf9, 0x9e, 0x7b, 0x72, 0xec, 0x73, 0xcf, 0x85, 0x8f, 0x65, 0x23, 0x8b, 0x34,
	0x93, 0x3c, 0xce, 0x79, 0xc5, 0xcd, 0x17, 0xe7, 0x8d, 0xc8, 0x68, 0x91, 0x29, 0x1d, 0xd7, 0x4c,
	0xa9, 0xac, 0x64, 0xb1, 0x6e, 0x63, 0xd9, 0x88, 0x3b, 0x22, 0x1b, 0xa1, 0x05, 0x3e, 0x1b, 0x98,
	0x64, 0x64, 0x92, 0x9e, 0x49, 0x74, 0x7b, 0x72, 0x5a, 0x0a, 0x51, 0x56, 0x2c, 0xb6, 0xe4, 0x7c,
	0x73, 0x1b, 0xb3, 0x5a, 0xea, 0xce, 0xfd, 0x3b, 0xff, 0x83, 0x20, 0xbc, 0x6e, 0xc4, 0xdd, 0x8a,
	0xc9, 0xaa, 0xc3, 0x6f, 0x61, 0x56, 0xd4, 0x34, 0xd5, 0x9d, 0x64, 0x11, 0x3a, 0x47, 0x0b, 0x6f,
	0x15, 0x14, 0x35, 0x5d, 0x77, 0x92, 0xe1, 0x43, 0xf0, 0x6a, 0x4e, 0xa3, 0x03, 0x8b, 0x9a, 0xa3,
	0x41, 0x32, 0x4e, 0x23, 0xcf, 0x21, 0x99, 0x43, 0x0a, 0x4e, 0xa3, 0x89, 0x43, 0x0a, 0x4e, 0xf1,
	0x19, 0x40, 0xcb, 0x29, 0x13, 0x4e, 0x72, 0x6a, 0x1b, 0xa1, 0x45, 0xac, 0xe8, 0x6b, 0x98, 0x32,
	0x99, 0x72, 0x1a, 0xf9, 0xb6, 0x33, 0x61, 0x72, 0x49, 0xf1, 0x29, 0x84, 0x8a, 0x65, 0x4a, 0xfc,
	0x34, 0x8d, 0xc0, 0x36, 0x66, 0x0e, 0x58, 0x52, 0x7c, 0x0c, 0x81, 0x62, 0xec, 0x3e, 0xd5, 0x2a,
	0x9a, 0xd9, 0x96, 0x6f, 0xca, 0xb5, 0xc2, 0x6f, 0x60, 0xca, 0x7e, 0xe9, 0x26, 0x8b, 0xc2, 0x73,
	0xb4, 0x08, 0x57, 0xae, 0x98, 0x5f, 0xc1, 0xe1, 0x57, 0xde, 0xb2, 0x1b, 0x9d, 0xe9, 0x8d, 0xba,
	0x12, 0x9a, 0xdf, 0x76, 0xf8, 0x08, 0x7c, 0x65, 0xeb, 0xde, 0x62, 0x5f, 0x59, 0x87, 0xaa, 0xb4,
	0x0e, 0xc3, 0x95, 0x39, 0x0e, 0x7e, 0xbc, 0xd1, 0xcf, 0xfc, 0x02, 0x5e, 0x5c, 0x2a, 0x29, 0x1a,
	0x3d, 0x88, 0xf5, 0x14, 0xb4, 0xa5, 0x30, 0x78, 0x75, 0xbd, 0xc9, 0x2b, 0x5e, 0x70, 0xdd, 0xf5,
	0xa4, 0x0b, 0x78, 0x2e, 0x07, 0x28, 0x1d, 0xd9, 0xcf, 0x46, 0xcc, 0xf9, 0x6a, 0x84, 0xa8, 0xd3,
	0x71, 0xc4, 0xbe, 0x29, 0x97, 0xf4, 0xc1, 0x6b, 0xbd, 0x87, 0xaf, 0x9d, 0xbf, 0x83, 0x97, 0xd6,
	0xd9, 0x3d, 0x97, 0xfd, 0x2d, 0xc7, 0x10, 0x54, 0xbc, 0x65, 0xdb, 0x0b, 0x7c, 0x53, 0x2e, 0xe9,
	0xa7, 0xdf, 0x1e, 0x1c, 0xac, 0x5b, 0xfc, 0x05, 0x26, 0x26, 0x69, 0x7c, 0x44, 0xdc, 0x42, 0x90,
	0x61, 0x21, 0xc8, 0xa5, 0x59, 0x88, 0x93, 0x05, 0xf9, 0xef, 0x1e, 0x91, 0x71, 0x4d, 0x12, 0x84,
	0x7f, 0x00, 0x6c, 0xe7, 0xba, 0x53, 0x31, 0xde, 0xa3, 0xf8, 0x6f, 0x34, 0x09, 0xc2, 0xdf, 0x20,
	0xe8, 0x07, 0xbc, 0x53, 0xf5, 0xfd, 0x1e, 0xd5, 0x47, 0x01, 0x25, 0x08, 0x7f, 0x87, 0x70, 0x0c,
	0x64, 0xa7, 0x28, 0xd9, 0x67, 0xfe, 0x71, 0xa4, 0x09, 0xc2, 0x37, 0x30, 0x1b, 0x02, 0xd8, 0xa9,
	0xfa, 0xe1, 0x29, 0x03, 0x18, 0x13, 0x4c, 0x50, 0xee, 0x5b, 0x81, 0xcf, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xbd, 0x4a, 0x77, 0xd6, 0x06, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TvClient is the client API for Tv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TvClient interface {
	// 投屏
	Proj(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_ProjClient, error)
	// 直播状态
	LiveStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_LiveStatusClient, error)
	// 赛事比分通知
	Esports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_EsportsClient, error)
	// 直播插卡
	Publicity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_PublicityClient, error)
	// 直转点
	LiveSkip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_LiveSkipClient, error)
}

type tvClient struct {
	cc *grpc.ClientConn
}

func NewTvClient(cc *grpc.ClientConn) TvClient {
	return &tvClient{cc}
}

func (c *tvClient) Proj(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_ProjClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tv_serviceDesc.Streams[0], "/bilibili.broadcast.message.tv.Tv/Proj", opts...)
	if err != nil {
		return nil, err
	}
	x := &tvProjClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tv_ProjClient interface {
	Recv() (*ProjReply, error)
	grpc.ClientStream
}

type tvProjClient struct {
	grpc.ClientStream
}

func (x *tvProjClient) Recv() (*ProjReply, error) {
	m := new(ProjReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tvClient) LiveStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_LiveStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tv_serviceDesc.Streams[1], "/bilibili.broadcast.message.tv.Tv/LiveStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &tvLiveStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tv_LiveStatusClient interface {
	Recv() (*LiveStatusNotify, error)
	grpc.ClientStream
}

type tvLiveStatusClient struct {
	grpc.ClientStream
}

func (x *tvLiveStatusClient) Recv() (*LiveStatusNotify, error) {
	m := new(LiveStatusNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tvClient) Esports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_EsportsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tv_serviceDesc.Streams[2], "/bilibili.broadcast.message.tv.Tv/Esports", opts...)
	if err != nil {
		return nil, err
	}
	x := &tvEsportsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tv_EsportsClient interface {
	Recv() (*EsportsNotify, error)
	grpc.ClientStream
}

type tvEsportsClient struct {
	grpc.ClientStream
}

func (x *tvEsportsClient) Recv() (*EsportsNotify, error) {
	m := new(EsportsNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tvClient) Publicity(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_PublicityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tv_serviceDesc.Streams[3], "/bilibili.broadcast.message.tv.Tv/Publicity", opts...)
	if err != nil {
		return nil, err
	}
	x := &tvPublicityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tv_PublicityClient interface {
	Recv() (*PublicityNotify, error)
	grpc.ClientStream
}

type tvPublicityClient struct {
	grpc.ClientStream
}

func (x *tvPublicityClient) Recv() (*PublicityNotify, error) {
	m := new(PublicityNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tvClient) LiveSkip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tv_LiveSkipClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tv_serviceDesc.Streams[4], "/bilibili.broadcast.message.tv.Tv/LiveSkip", opts...)
	if err != nil {
		return nil, err
	}
	x := &tvLiveSkipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tv_LiveSkipClient interface {
	Recv() (*LiveSkipNotify, error)
	grpc.ClientStream
}

type tvLiveSkipClient struct {
	grpc.ClientStream
}

func (x *tvLiveSkipClient) Recv() (*LiveSkipNotify, error) {
	m := new(LiveSkipNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TvServer is the server API for Tv service.
type TvServer interface {
	// 投屏
	Proj(*emptypb.Empty, Tv_ProjServer) error
	// 直播状态
	LiveStatus(*emptypb.Empty, Tv_LiveStatusServer) error
	// 赛事比分通知
	Esports(*emptypb.Empty, Tv_EsportsServer) error
	// 直播插卡
	Publicity(*emptypb.Empty, Tv_PublicityServer) error
	// 直转点
	LiveSkip(*emptypb.Empty, Tv_LiveSkipServer) error
}

// UnimplementedTvServer can be embedded to have forward compatible implementations.
type UnimplementedTvServer struct {
}

func (*UnimplementedTvServer) Proj(req *emptypb.Empty, srv Tv_ProjServer) error {
	return status.Errorf(codes.Unimplemented, "method Proj not implemented")
}
func (*UnimplementedTvServer) LiveStatus(req *emptypb.Empty, srv Tv_LiveStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveStatus not implemented")
}
func (*UnimplementedTvServer) Esports(req *emptypb.Empty, srv Tv_EsportsServer) error {
	return status.Errorf(codes.Unimplemented, "method Esports not implemented")
}
func (*UnimplementedTvServer) Publicity(req *emptypb.Empty, srv Tv_PublicityServer) error {
	return status.Errorf(codes.Unimplemented, "method Publicity not implemented")
}
func (*UnimplementedTvServer) LiveSkip(req *emptypb.Empty, srv Tv_LiveSkipServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveSkip not implemented")
}

func RegisterTvServer(s *grpc.Server, srv TvServer) {
	s.RegisterService(&_Tv_serviceDesc, srv)
}

func _Tv_Proj_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TvServer).Proj(m, &tvProjServer{stream})
}

type Tv_ProjServer interface {
	Send(*ProjReply) error
	grpc.ServerStream
}

type tvProjServer struct {
	grpc.ServerStream
}

func (x *tvProjServer) Send(m *ProjReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Tv_LiveStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TvServer).LiveStatus(m, &tvLiveStatusServer{stream})
}

type Tv_LiveStatusServer interface {
	Send(*LiveStatusNotify) error
	grpc.ServerStream
}

type tvLiveStatusServer struct {
	grpc.ServerStream
}

func (x *tvLiveStatusServer) Send(m *LiveStatusNotify) error {
	return x.ServerStream.SendMsg(m)
}

func _Tv_Esports_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TvServer).Esports(m, &tvEsportsServer{stream})
}

type Tv_EsportsServer interface {
	Send(*EsportsNotify) error
	grpc.ServerStream
}

type tvEsportsServer struct {
	grpc.ServerStream
}

func (x *tvEsportsServer) Send(m *EsportsNotify) error {
	return x.ServerStream.SendMsg(m)
}

func _Tv_Publicity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TvServer).Publicity(m, &tvPublicityServer{stream})
}

type Tv_PublicityServer interface {
	Send(*PublicityNotify) error
	grpc.ServerStream
}

type tvPublicityServer struct {
	grpc.ServerStream
}

func (x *tvPublicityServer) Send(m *PublicityNotify) error {
	return x.ServerStream.SendMsg(m)
}

func _Tv_LiveSkip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TvServer).LiveSkip(m, &tvLiveSkipServer{stream})
}

type Tv_LiveSkipServer interface {
	Send(*LiveSkipNotify) error
	grpc.ServerStream
}

type tvLiveSkipServer struct {
	grpc.ServerStream
}

func (x *tvLiveSkipServer) Send(m *LiveSkipNotify) error {
	return x.ServerStream.SendMsg(m)
}

var _Tv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.message.tv.Tv",
	HandlerType: (*TvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Proj",
			Handler:       _Tv_Proj_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiveStatus",
			Handler:       _Tv_LiveStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Esports",
			Handler:       _Tv_Esports_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Publicity",
			Handler:       _Tv_Publicity_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiveSkip",
			Handler:       _Tv_LiveSkip_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_api/bilibili/broadcast/message/tv/proj.proto",
}
