// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_api/bilibili/broadcast/v1/laser.proto

package bilibili_broadcast_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 服务端下发日志上报事件
type LaserLogUploadResp struct {
	// 任务id
	Taskid int64 `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	// 下发时间
	Date                 string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaserLogUploadResp) Reset()         { *m = LaserLogUploadResp{} }
func (m *LaserLogUploadResp) String() string { return proto.CompactTextString(m) }
func (*LaserLogUploadResp) ProtoMessage()    {}
func (*LaserLogUploadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6afa3a102ec1939c, []int{0}
}

func (m *LaserLogUploadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaserLogUploadResp.Unmarshal(m, b)
}
func (m *LaserLogUploadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaserLogUploadResp.Marshal(b, m, deterministic)
}
func (m *LaserLogUploadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaserLogUploadResp.Merge(m, src)
}
func (m *LaserLogUploadResp) XXX_Size() int {
	return xxx_messageInfo_LaserLogUploadResp.Size(m)
}
func (m *LaserLogUploadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LaserLogUploadResp.DiscardUnknown(m)
}

var xxx_messageInfo_LaserLogUploadResp proto.InternalMessageInfo

func (m *LaserLogUploadResp) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *LaserLogUploadResp) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func init() {
	proto.RegisterType((*LaserLogUploadResp)(nil), "bilibili.broadcast.v1.LaserLogUploadResp")
}

func init() {
	proto.RegisterFile("grpc_api/bilibili/broadcast/v1/laser.proto", fileDescriptor_6afa3a102ec1939c)
}

var fileDescriptor_6afa3a102ec1939c = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4a, 0x2f, 0x2a, 0x48,
	0x8e, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xca, 0xcc, 0xc9, 0x04, 0x61, 0xfd, 0xa4, 0xa2, 0xfc, 0xc4,
	0x94, 0xe4, 0xc4, 0xe2, 0x12, 0xfd, 0x32, 0x43, 0xfd, 0x9c, 0xc4, 0xe2, 0xd4, 0x22, 0xbd, 0x82,
	0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x51, 0x98, 0x12, 0x3d, 0xb8, 0x12, 0xbd, 0x32, 0x43, 0x29, 0xe9,
	0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0xb0, 0xa2, 0xa4, 0xd2, 0x34, 0xfd, 0xd4, 0xdc, 0x82,
	0x92, 0x4a, 0x88, 0x1e, 0x25, 0x07, 0x2e, 0x21, 0x1f, 0x90, 0x11, 0x3e, 0xf9, 0xe9, 0xa1, 0x05,
	0x39, 0xf9, 0x89, 0x29, 0x41, 0xa9, 0xc5, 0x05, 0x42, 0x62, 0x5c, 0x6c, 0x25, 0x89, 0xc5, 0xd9,
	0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x50, 0x9e, 0x90, 0x10, 0x17, 0x4b, 0x4a,
	0x62, 0x49, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x6d, 0x94, 0xcc, 0xc5, 0x0a,
	0x36, 0x41, 0x28, 0x8a, 0x4b, 0x38, 0x3c, 0xb1, 0x24, 0x39, 0x03, 0x6e, 0x94, 0x6b, 0x59, 0x6a,
	0x5e, 0x89, 0x90, 0x98, 0x1e, 0xc4, 0x7e, 0x3d, 0x98, 0xfd, 0x7a, 0xae, 0x20, 0xfb, 0xa5, 0x34,
	0xf5, 0xb0, 0x3a, 0x57, 0x0f, 0xd3, 0x39, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xcd, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x97, 0x02, 0xe1, 0x4b, 0x0f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LaserClient is the client API for Laser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LaserClient interface {
	// 监听上报事件
	WatchLogUploadEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Laser_WatchLogUploadEventClient, error)
}

type laserClient struct {
	cc *grpc.ClientConn
}

func NewLaserClient(cc *grpc.ClientConn) LaserClient {
	return &laserClient{cc}
}

func (c *laserClient) WatchLogUploadEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Laser_WatchLogUploadEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Laser_serviceDesc.Streams[0], "/bilibili.broadcast.v1.Laser/WatchLogUploadEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &laserWatchLogUploadEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Laser_WatchLogUploadEventClient interface {
	Recv() (*LaserLogUploadResp, error)
	grpc.ClientStream
}

type laserWatchLogUploadEventClient struct {
	grpc.ClientStream
}

func (x *laserWatchLogUploadEventClient) Recv() (*LaserLogUploadResp, error) {
	m := new(LaserLogUploadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LaserServer is the server API for Laser service.
type LaserServer interface {
	// 监听上报事件
	WatchLogUploadEvent(*emptypb.Empty, Laser_WatchLogUploadEventServer) error
}

// UnimplementedLaserServer can be embedded to have forward compatible implementations.
type UnimplementedLaserServer struct {
}

func (*UnimplementedLaserServer) WatchLogUploadEvent(req *emptypb.Empty, srv Laser_WatchLogUploadEventServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogUploadEvent not implemented")
}

func RegisterLaserServer(s *grpc.Server, srv LaserServer) {
	s.RegisterService(&_Laser_serviceDesc, srv)
}

func _Laser_WatchLogUploadEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LaserServer).WatchLogUploadEvent(m, &laserWatchLogUploadEventServer{stream})
}

type Laser_WatchLogUploadEventServer interface {
	Send(*LaserLogUploadResp) error
	grpc.ServerStream
}

type laserWatchLogUploadEventServer struct {
	grpc.ServerStream
}

func (x *laserWatchLogUploadEventServer) Send(m *LaserLogUploadResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Laser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.Laser",
	HandlerType: (*LaserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchLogUploadEvent",
			Handler:       _Laser_WatchLogUploadEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_api/bilibili/broadcast/v1/laser.proto",
}
