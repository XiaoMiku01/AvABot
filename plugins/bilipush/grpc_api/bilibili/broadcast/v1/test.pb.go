// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_api/bilibili/broadcast/v1/test.proto

package bilibili_broadcast_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
type AddParams struct {
	//
	A int32 `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	//
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddParams) Reset()         { *m = AddParams{} }
func (m *AddParams) String() string { return proto.CompactTextString(m) }
func (*AddParams) ProtoMessage()    {}
func (*AddParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_56552fa481ccaf4e, []int{0}
}

func (m *AddParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddParams.Unmarshal(m, b)
}
func (m *AddParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddParams.Marshal(b, m, deterministic)
}
func (m *AddParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddParams.Merge(m, src)
}
func (m *AddParams) XXX_Size() int {
	return xxx_messageInfo_AddParams.Size(m)
}
func (m *AddParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AddParams.DiscardUnknown(m)
}

var xxx_messageInfo_AddParams proto.InternalMessageInfo

func (m *AddParams) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *AddParams) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

//
type AddResult struct {
	//
	R                    int32    `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddResult) Reset()         { *m = AddResult{} }
func (m *AddResult) String() string { return proto.CompactTextString(m) }
func (*AddResult) ProtoMessage()    {}
func (*AddResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_56552fa481ccaf4e, []int{1}
}

func (m *AddResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddResult.Unmarshal(m, b)
}
func (m *AddResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddResult.Marshal(b, m, deterministic)
}
func (m *AddResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddResult.Merge(m, src)
}
func (m *AddResult) XXX_Size() int {
	return xxx_messageInfo_AddResult.Size(m)
}
func (m *AddResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AddResult.DiscardUnknown(m)
}

var xxx_messageInfo_AddResult proto.InternalMessageInfo

func (m *AddResult) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

type TestResp struct {
	// 任务id
	Taskid int64 `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	// 时间戳
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 消息
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// 扩展
	Extra                *anypb.Any `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TestResp) Reset()         { *m = TestResp{} }
func (m *TestResp) String() string { return proto.CompactTextString(m) }
func (*TestResp) ProtoMessage()    {}
func (*TestResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_56552fa481ccaf4e, []int{2}
}

func (m *TestResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResp.Unmarshal(m, b)
}
func (m *TestResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResp.Marshal(b, m, deterministic)
}
func (m *TestResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResp.Merge(m, src)
}
func (m *TestResp) XXX_Size() int {
	return xxx_messageInfo_TestResp.Size(m)
}
func (m *TestResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResp.DiscardUnknown(m)
}

var xxx_messageInfo_TestResp proto.InternalMessageInfo

func (m *TestResp) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *TestResp) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TestResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TestResp) GetExtra() *anypb.Any {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*AddParams)(nil), "bilibili.broadcast.v1.AddParams")
	proto.RegisterType((*AddResult)(nil), "bilibili.broadcast.v1.AddResult")
	proto.RegisterType((*TestResp)(nil), "bilibili.broadcast.v1.TestResp")
}

func init() {
	proto.RegisterFile("grpc_api/bilibili/broadcast/v1/test.proto", fileDescriptor_56552fa481ccaf4e)
}

var fileDescriptor_56552fa481ccaf4e = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0xc7, 0x65, 0xfa, 0x01, 0x35, 0x88, 0xc1, 0x82, 0x2a, 0x0d, 0x48, 0x44, 0x5d, 0x28, 0x0c,
	0x36, 0x0d, 0x2f, 0x40, 0x87, 0x0e, 0x88, 0x05, 0x19, 0x24, 0x46, 0x74, 0x6e, 0x4c, 0x88, 0x68,
	0x1a, 0xcb, 0xbe, 0x46, 0xf4, 0x05, 0x78, 0x6e, 0xe4, 0x7c, 0x14, 0x09, 0xe8, 0xe0, 0xe1, 0xe7,
	0xff, 0xef, 0xce, 0xbe, 0xa3, 0x57, 0xa9, 0x35, 0x8b, 0x57, 0x30, 0x99, 0x50, 0xd9, 0x32, 0xf3,
	0x47, 0x28, 0x5b, 0x40, 0xb2, 0x00, 0x87, 0xa2, 0x9c, 0x0a, 0xd4, 0x0e, 0xb9, 0xb1, 0x05, 0x16,
	0xec, 0xb4, 0x35, 0xf8, 0xd6, 0xe0, 0xe5, 0x34, 0x1c, 0xa5, 0x45, 0x91, 0x2e, 0xb5, 0xa8, 0x24,
	0xb5, 0x7e, 0x13, 0xb0, 0xda, 0xd4, 0x15, 0xe1, 0xd9, 0xef, 0x48, 0xe7, 0x06, 0x9b, 0x70, 0x7c,
	0x49, 0x07, 0xb3, 0x24, 0x79, 0x04, 0x0b, 0xb9, 0x63, 0x47, 0x94, 0x40, 0x40, 0x22, 0x32, 0xe9,
	0x49, 0x02, 0x9e, 0x54, 0xb0, 0x57, 0x93, 0x1a, 0x8f, 0x2a, 0x51, 0x6a, 0xb7, 0x5e, 0xa2, 0x8f,
	0x6c, 0x2b, 0xda, 0xf1, 0x17, 0xa1, 0x07, 0xcf, 0xda, 0xa1, 0xd4, 0xce, 0xb0, 0x21, 0xed, 0x23,
	0xb8, 0x8f, 0x2c, 0xa9, 0xf2, 0x8e, 0x6c, 0x88, 0x9d, 0xd3, 0x01, 0x66, 0xb9, 0x76, 0x08, 0xb9,
	0xa9, 0xba, 0x76, 0xe4, 0xcf, 0x05, 0x0b, 0xe8, 0x7e, 0xae, 0x9d, 0x83, 0x54, 0x07, 0x9d, 0x88,
	0x4c, 0x06, 0xb2, 0x45, 0x76, 0x4d, 0x7b, 0xfa, 0x13, 0x2d, 0x04, 0xdd, 0x88, 0x4c, 0x0e, 0xe3,
	0x13, 0x5e, 0x4f, 0xc3, 0xdb, 0x69, 0xf8, 0x6c, 0xb5, 0x91, 0xb5, 0x12, 0x3f, 0xd1, 0xae, 0xff,
	0x07, 0x7b, 0xa0, 0xc7, 0x2f, 0x80, 0x8b, 0x77, 0x0f, 0xf3, 0x52, 0xaf, 0x90, 0x0d, 0xff, 0x94,
	0xcd, 0xfd, 0x12, 0xc2, 0x0b, 0xfe, 0xef, 0x3a, 0x79, 0x3b, 0xce, 0x0d, 0x89, 0xef, 0x69, 0xcf,
	0x53, 0xcc, 0xee, 0x9a, 0xee, 0xd1, 0x8e, 0x9a, 0xed, 0x1e, 0xc3, 0x1d, 0xaf, 0xa9, 0x7e, 0xc5,
	0xb7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x80, 0xac, 0x5d, 0xef, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestClient interface {
	// 监听上报事件
	WatchTestEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Test_WatchTestEventClient, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) WatchTestEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Test_WatchTestEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Test_serviceDesc.Streams[0], "/bilibili.broadcast.v1.Test/WatchTestEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &testWatchTestEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_WatchTestEventClient interface {
	Recv() (*TestResp, error)
	grpc.ClientStream
}

type testWatchTestEventClient struct {
	grpc.ClientStream
}

func (x *testWatchTestEventClient) Recv() (*TestResp, error) {
	m := new(TestResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
type TestServer interface {
	// 监听上报事件
	WatchTestEvent(*emptypb.Empty, Test_WatchTestEventServer) error
}

// UnimplementedTestServer can be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (*UnimplementedTestServer) WatchTestEvent(req *emptypb.Empty, srv Test_WatchTestEventServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTestEvent not implemented")
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_WatchTestEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).WatchTestEvent(m, &testWatchTestEventServer{stream})
}

type Test_WatchTestEventServer interface {
	Send(*TestResp) error
	grpc.ServerStream
}

type testWatchTestEventServer struct {
	grpc.ServerStream
}

func (x *testWatchTestEventServer) Send(m *TestResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.Test",
	HandlerType: (*TestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTestEvent",
			Handler:       _Test_WatchTestEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_api/bilibili/broadcast/v1/test.proto",
}

// Test2Client is the client API for Test2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Test2Client interface {
	//
	Test(ctx context.Context, in *AddParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type test2Client struct {
	cc *grpc.ClientConn
}

func NewTest2Client(cc *grpc.ClientConn) Test2Client {
	return &test2Client{cc}
}

func (c *test2Client) Test(ctx context.Context, in *AddParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bilibili.broadcast.v1.Test2/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Test2Server is the server API for Test2 service.
type Test2Server interface {
	//
	Test(context.Context, *AddParams) (*emptypb.Empty, error)
}

// UnimplementedTest2Server can be embedded to have forward compatible implementations.
type UnimplementedTest2Server struct {
}

func (*UnimplementedTest2Server) Test(ctx context.Context, req *AddParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterTest2Server(s *grpc.Server, srv Test2Server) {
	s.RegisterService(&_Test2_serviceDesc, srv)
}

func _Test2_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test2Server).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.broadcast.v1.Test2/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test2Server).Test(ctx, req.(*AddParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.Test2",
	HandlerType: (*Test2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Test2_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api/bilibili/broadcast/v1/test.proto",
}
