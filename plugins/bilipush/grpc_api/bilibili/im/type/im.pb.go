// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_api/bilibili/im/type/im.proto

package bilibili_im_type

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
type CmdId int32

const (
	CmdId_EN_CMD_ID_INVALID CmdId = 0
	// msg_svr
	CmdId_EN_CMD_ID_SEND_MSG CmdId = 200001
	// sync_msg_svr
	CmdId_EN_CMD_ID_SYNC_MSG                CmdId = 500001
	CmdId_EN_CMD_ID_SYNC_RELATION           CmdId = 500002
	CmdId_EN_CMD_ID_SYNC_ACK                CmdId = 500003
	CmdId_EN_CMD_ID_SYNC_FETCH_SESSION_MSGS CmdId = 500006
	// session_svr
	CmdId_EN_CMD_ID_SESSION_SVR_GET_SESSIONS      CmdId = 1000001
	CmdId_EN_CMD_ID_SESSION_SVR_NEW_SESSIONS      CmdId = 1000002
	CmdId_EN_CMD_ID_SESSION_SVR_ACK_SESSIONS      CmdId = 1000003
	CmdId_EN_CMD_ID_SESSION_SVR_UPDATE_ACK        CmdId = 1000004
	CmdId_EN_CMD_ID_SESSION_SVR_SET_TOP           CmdId = 1000005
	CmdId_EN_CMD_ID_SESSION_SVR_REMOVE_SESSION    CmdId = 1000007
	CmdId_EN_CMD_ID_SESSION_SVR_SINGLE_UNREAD     CmdId = 1000008
	CmdId_EN_CMD_ID_SESSION_SVR_MY_GROUP_UNREAD   CmdId = 1000009
	CmdId_EN_CMD_ID_SESSION_SVR_UPDATE_UNFLW_READ CmdId = 1000010
	CmdId_EN_CMD_ID_SESSION_SVR_GROUP_ASSIS_MSG   CmdId = 1000011
	CmdId_EN_CMD_ID_SESSION_SVR_ACK_ASSIS_MSG     CmdId = 1000012
	CmdId_EN_CMD_ID_SESSION_SVR_SESSION_DETAIL    CmdId = 1000015
	CmdId_EN_CMD_ID_SESSION_SVR_BATCH_SESS_DETAIL CmdId = 1000016
	CmdId_EN_CMD_ID_SESSION_SVR_BATCH_RM_SESSIONS CmdId = 1000017
)

var CmdId_name = map[int32]string{
	0:       "EN_CMD_ID_INVALID",
	200001:  "EN_CMD_ID_SEND_MSG",
	500001:  "EN_CMD_ID_SYNC_MSG",
	500002:  "EN_CMD_ID_SYNC_RELATION",
	500003:  "EN_CMD_ID_SYNC_ACK",
	500006:  "EN_CMD_ID_SYNC_FETCH_SESSION_MSGS",
	1000001: "EN_CMD_ID_SESSION_SVR_GET_SESSIONS",
	1000002: "EN_CMD_ID_SESSION_SVR_NEW_SESSIONS",
	1000003: "EN_CMD_ID_SESSION_SVR_ACK_SESSIONS",
	1000004: "EN_CMD_ID_SESSION_SVR_UPDATE_ACK",
	1000005: "EN_CMD_ID_SESSION_SVR_SET_TOP",
	1000007: "EN_CMD_ID_SESSION_SVR_REMOVE_SESSION",
	1000008: "EN_CMD_ID_SESSION_SVR_SINGLE_UNREAD",
	1000009: "EN_CMD_ID_SESSION_SVR_MY_GROUP_UNREAD",
	1000010: "EN_CMD_ID_SESSION_SVR_UPDATE_UNFLW_READ",
	1000011: "EN_CMD_ID_SESSION_SVR_GROUP_ASSIS_MSG",
	1000012: "EN_CMD_ID_SESSION_SVR_ACK_ASSIS_MSG",
	1000015: "EN_CMD_ID_SESSION_SVR_SESSION_DETAIL",
	1000016: "EN_CMD_ID_SESSION_SVR_BATCH_SESS_DETAIL",
	1000017: "EN_CMD_ID_SESSION_SVR_BATCH_RM_SESSIONS",
}

var CmdId_value = map[string]int32{
	"EN_CMD_ID_INVALID":                       0,
	"EN_CMD_ID_SEND_MSG":                      200001,
	"EN_CMD_ID_SYNC_MSG":                      500001,
	"EN_CMD_ID_SYNC_RELATION":                 500002,
	"EN_CMD_ID_SYNC_ACK":                      500003,
	"EN_CMD_ID_SYNC_FETCH_SESSION_MSGS":       500006,
	"EN_CMD_ID_SESSION_SVR_GET_SESSIONS":      1000001,
	"EN_CMD_ID_SESSION_SVR_NEW_SESSIONS":      1000002,
	"EN_CMD_ID_SESSION_SVR_ACK_SESSIONS":      1000003,
	"EN_CMD_ID_SESSION_SVR_UPDATE_ACK":        1000004,
	"EN_CMD_ID_SESSION_SVR_SET_TOP":           1000005,
	"EN_CMD_ID_SESSION_SVR_REMOVE_SESSION":    1000007,
	"EN_CMD_ID_SESSION_SVR_SINGLE_UNREAD":     1000008,
	"EN_CMD_ID_SESSION_SVR_MY_GROUP_UNREAD":   1000009,
	"EN_CMD_ID_SESSION_SVR_UPDATE_UNFLW_READ": 1000010,
	"EN_CMD_ID_SESSION_SVR_GROUP_ASSIS_MSG":   1000011,
	"EN_CMD_ID_SESSION_SVR_ACK_ASSIS_MSG":     1000012,
	"EN_CMD_ID_SESSION_SVR_SESSION_DETAIL":    1000015,
	"EN_CMD_ID_SESSION_SVR_BATCH_SESS_DETAIL": 1000016,
	"EN_CMD_ID_SESSION_SVR_BATCH_RM_SESSIONS": 1000017,
}

func (x CmdId) String() string {
	return proto.EnumName(CmdId_name, int32(x))
}

func (CmdId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{0}
}

//
type ENUM_BIZ_MSG_TYPE int32

const (
	ENUM_BIZ_MSG_TYPE_BIZ_MSG_TYPE_NORMAL     ENUM_BIZ_MSG_TYPE = 0
	ENUM_BIZ_MSG_TYPE_BIZ_MSG_TYPE_CARD_VIDEO ENUM_BIZ_MSG_TYPE = 1
)

var ENUM_BIZ_MSG_TYPE_name = map[int32]string{
	0: "BIZ_MSG_TYPE_NORMAL",
	1: "BIZ_MSG_TYPE_CARD_VIDEO",
}

var ENUM_BIZ_MSG_TYPE_value = map[string]int32{
	"BIZ_MSG_TYPE_NORMAL":     0,
	"BIZ_MSG_TYPE_CARD_VIDEO": 1,
}

func (x ENUM_BIZ_MSG_TYPE) String() string {
	return proto.EnumName(ENUM_BIZ_MSG_TYPE_name, int32(x))
}

func (ENUM_BIZ_MSG_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{1}
}

// 消息来源
type MsgSource int32

const (
	MsgSource_EN_MSG_SOURCE_UNKONW                   MsgSource = 0
	MsgSource_EN_MSG_SOURCE_IOS                      MsgSource = 1
	MsgSource_EN_MSG_SOURCE_ANDRIOD                  MsgSource = 2
	MsgSource_EN_MSG_SOURCE_H5                       MsgSource = 3
	MsgSource_EN_MSG_SOURCE_PC                       MsgSource = 4
	MsgSource_EN_MSG_SOURCE_BACKSTAGE                MsgSource = 5
	MsgSource_EN_MSG_SOURCE_BIZ                      MsgSource = 6
	MsgSource_EN_MSG_SOURCE_WEB                      MsgSource = 7
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_FOLLOWED    MsgSource = 8
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_RECEIVE_MSG MsgSource = 9
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_KEYWORDS    MsgSource = 10
	MsgSource_EN_MSG_SOURCE_AUTOREPLY_BY_VOYAGE      MsgSource = 11
	MsgSource_EN_MSG_SOURCE_VC_ATTACH_MSG            MsgSource = 12
)

var MsgSource_name = map[int32]string{
	0:  "EN_MSG_SOURCE_UNKONW",
	1:  "EN_MSG_SOURCE_IOS",
	2:  "EN_MSG_SOURCE_ANDRIOD",
	3:  "EN_MSG_SOURCE_H5",
	4:  "EN_MSG_SOURCE_PC",
	5:  "EN_MSG_SOURCE_BACKSTAGE",
	6:  "EN_MSG_SOURCE_BIZ",
	7:  "EN_MSG_SOURCE_WEB",
	8:  "EN_MSG_SOURCE_AUTOREPLY_BY_FOLLOWED",
	9:  "EN_MSG_SOURCE_AUTOREPLY_BY_RECEIVE_MSG",
	10: "EN_MSG_SOURCE_AUTOREPLY_BY_KEYWORDS",
	11: "EN_MSG_SOURCE_AUTOREPLY_BY_VOYAGE",
	12: "EN_MSG_SOURCE_VC_ATTACH_MSG",
}

var MsgSource_value = map[string]int32{
	"EN_MSG_SOURCE_UNKONW":                   0,
	"EN_MSG_SOURCE_IOS":                      1,
	"EN_MSG_SOURCE_ANDRIOD":                  2,
	"EN_MSG_SOURCE_H5":                       3,
	"EN_MSG_SOURCE_PC":                       4,
	"EN_MSG_SOURCE_BACKSTAGE":                5,
	"EN_MSG_SOURCE_BIZ":                      6,
	"EN_MSG_SOURCE_WEB":                      7,
	"EN_MSG_SOURCE_AUTOREPLY_BY_FOLLOWED":    8,
	"EN_MSG_SOURCE_AUTOREPLY_BY_RECEIVE_MSG": 9,
	"EN_MSG_SOURCE_AUTOREPLY_BY_KEYWORDS":    10,
	"EN_MSG_SOURCE_AUTOREPLY_BY_VOYAGE":      11,
	"EN_MSG_SOURCE_VC_ATTACH_MSG":            12,
}

func (x MsgSource) String() string {
	return proto.EnumName(MsgSource_name, int32(x))
}

func (MsgSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{2}
}

// 消息类型
type MsgType int32

const (
	// 基础消息类型
	MsgType_EN_INVALID_MSG_TYPE      MsgType = 0
	MsgType_EN_MSG_TYPE_TEXT         MsgType = 1
	MsgType_EN_MSG_TYPE_PIC          MsgType = 2
	MsgType_EN_MSG_TYPE_AUDIO        MsgType = 3
	MsgType_EN_MSG_TYPE_SHARE        MsgType = 4
	MsgType_EN_MSG_TYPE_DRAW_BACK    MsgType = 5
	MsgType_EN_MSG_TYPE_CUSTOM_FACE  MsgType = 6
	MsgType_EN_MSG_TYPE_SHARE_V2     MsgType = 7
	MsgType_EN_MSG_TYPE_SYS_CANCEL   MsgType = 8
	MsgType_EN_MSG_TYPE_MINI_PROGRAM MsgType = 9
	// 扩展消息类型
	MsgType_EN_MSG_TYPE_NOTIFY_MSG        MsgType = 10
	MsgType_EN_MSG_TYPE_VIDEO_CARD        MsgType = 11
	MsgType_EN_MSG_TYPE_ARTICLE_CARD      MsgType = 12
	MsgType_EN_MSG_TYPE_PICTURE_CARD      MsgType = 13
	MsgType_EN_MSG_TYPE_COMMON_SHARE_CARD MsgType = 14
	MsgType_EN_MSG_TYPE_BIZ_MSG_TYPE      MsgType = 50
	MsgType_EN_MSG_TYPE_MODIFY_MSG_TYPE   MsgType = 51
	// 功能类系统消息类型
	MsgType_EN_MSG_TYPE_GROUP_MEMBER_CHANGED            MsgType = 101
	MsgType_EN_MSG_TYPE_GROUP_STATUS_CHANGED            MsgType = 102
	MsgType_EN_MSG_TYPE_GROUP_DYNAMIC_CHANGED           MsgType = 103
	MsgType_EN_MSG_TYPE_GROUP_LIST_CHANGED              MsgType = 104
	MsgType_EM_MSG_TYPE_FRIEND_LIST_CHANGED             MsgType = 105
	MsgType_EN_MSG_TYPE_GROUP_DETAIL_CHANGED            MsgType = 106
	MsgType_EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED       MsgType = 107
	MsgType_EN_MSG_TYPE_NOTICE_WATCH_LIST               MsgType = 108
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED       MsgType = 109
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED          MsgType = 110
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED      MsgType = 111
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_UP_RECIEVED          MsgType = 112
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED_V2    MsgType = 113
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED_V2       MsgType = 114
	MsgType_EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED_V2   MsgType = 115
	MsgType_EN_MSG_TYPE_GROUP_DETAIL_CHANGED_MULTI      MsgType = 116
	MsgType_EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED_MULTI MsgType = 117
	MsgType_EN_MSG_TYPE_NOTIFY_ANTI_DISTURB             MsgType = 118
	// 系统通知栏消息类型
	MsgType_EN_MSG_TYPE_SYS_GROUP_DISSOLVED                 MsgType = 201
	MsgType_EN_MSG_TYPE_SYS_GROUP_JOINED                    MsgType = 202
	MsgType_EN_MSG_TYPE_SYS_GROUP_MEMBER_EXITED             MsgType = 203
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_FIRED               MsgType = 204
	MsgType_EN_MSG_TYPE_SYS_GROUP_MEMBER_KICKED             MsgType = 205
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_KICK_OFF            MsgType = 206
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_DUTY                MsgType = 207
	MsgType_EN_MSG_TYPE_SYS_GROUP_AUTO_CREATED              MsgType = 208
	MsgType_EN_MSG_TYPE_SYS_FRIEND_APPLY                    MsgType = 210
	MsgType_EN_MSG_TYPE_SYS_FRIEND_APPLY_ACK                MsgType = 211
	MsgType_EN_MSG_TYPE_SYS_GROUP_APPLY_FOR_JOINING         MsgType = 212
	MsgType_EN_MSG_TYPE_SYS_GROUP_ADMIN_ACCEPTED_USER_APPLY MsgType = 213
	// 聊天窗口通知消息类型
	MsgType_EN_MSG_TYPE_CHAT_MEMBER_JOINED   MsgType = 301
	MsgType_EN_MSG_TYPE_CHAT_MEMBER_EXITED   MsgType = 302
	MsgType_EN_MSG_TYPE_CHAT_GROUP_FREEZED   MsgType = 303
	MsgType_EN_MSG_TYPE_CHAT_GROUP_DISSOLVED MsgType = 304
	MsgType_EN_MSG_TYPE_CHAT_GROUP_CREATED   MsgType = 305
	MsgType_EN_MSG_TYPE_CHAT_POPUP_SESSION   MsgType = 306
)

var MsgType_name = map[int32]string{
	0:   "EN_INVALID_MSG_TYPE",
	1:   "EN_MSG_TYPE_TEXT",
	2:   "EN_MSG_TYPE_PIC",
	3:   "EN_MSG_TYPE_AUDIO",
	4:   "EN_MSG_TYPE_SHARE",
	5:   "EN_MSG_TYPE_DRAW_BACK",
	6:   "EN_MSG_TYPE_CUSTOM_FACE",
	7:   "EN_MSG_TYPE_SHARE_V2",
	8:   "EN_MSG_TYPE_SYS_CANCEL",
	9:   "EN_MSG_TYPE_MINI_PROGRAM",
	10:  "EN_MSG_TYPE_NOTIFY_MSG",
	11:  "EN_MSG_TYPE_VIDEO_CARD",
	12:  "EN_MSG_TYPE_ARTICLE_CARD",
	13:  "EN_MSG_TYPE_PICTURE_CARD",
	14:  "EN_MSG_TYPE_COMMON_SHARE_CARD",
	50:  "EN_MSG_TYPE_BIZ_MSG_TYPE",
	51:  "EN_MSG_TYPE_MODIFY_MSG_TYPE",
	101: "EN_MSG_TYPE_GROUP_MEMBER_CHANGED",
	102: "EN_MSG_TYPE_GROUP_STATUS_CHANGED",
	103: "EN_MSG_TYPE_GROUP_DYNAMIC_CHANGED",
	104: "EN_MSG_TYPE_GROUP_LIST_CHANGED",
	105: "EM_MSG_TYPE_FRIEND_LIST_CHANGED",
	106: "EN_MSG_TYPE_GROUP_DETAIL_CHANGED",
	107: "EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED",
	108: "EN_MSG_TYPE_NOTICE_WATCH_LIST",
	109: "EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED",
	110: "EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED",
	111: "EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED",
	112: "EN_MSG_TYPE_NOTIFY_NEW_UP_RECIEVED",
	113: "EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED_V2",
	114: "EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED_V2",
	115: "EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED_V2",
	116: "EN_MSG_TYPE_GROUP_DETAIL_CHANGED_MULTI",
	117: "EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED_MULTI",
	118: "EN_MSG_TYPE_NOTIFY_ANTI_DISTURB",
	201: "EN_MSG_TYPE_SYS_GROUP_DISSOLVED",
	202: "EN_MSG_TYPE_SYS_GROUP_JOINED",
	203: "EN_MSG_TYPE_SYS_GROUP_MEMBER_EXITED",
	204: "EN_MSG_TYPE_SYS_GROUP_ADMIN_FIRED",
	205: "EN_MSG_TYPE_SYS_GROUP_MEMBER_KICKED",
	206: "EN_MSG_TYPE_SYS_GROUP_ADMIN_KICK_OFF",
	207: "EN_MSG_TYPE_SYS_GROUP_ADMIN_DUTY",
	208: "EN_MSG_TYPE_SYS_GROUP_AUTO_CREATED",
	210: "EN_MSG_TYPE_SYS_FRIEND_APPLY",
	211: "EN_MSG_TYPE_SYS_FRIEND_APPLY_ACK",
	212: "EN_MSG_TYPE_SYS_GROUP_APPLY_FOR_JOINING",
	213: "EN_MSG_TYPE_SYS_GROUP_ADMIN_ACCEPTED_USER_APPLY",
	301: "EN_MSG_TYPE_CHAT_MEMBER_JOINED",
	302: "EN_MSG_TYPE_CHAT_MEMBER_EXITED",
	303: "EN_MSG_TYPE_CHAT_GROUP_FREEZED",
	304: "EN_MSG_TYPE_CHAT_GROUP_DISSOLVED",
	305: "EN_MSG_TYPE_CHAT_GROUP_CREATED",
	306: "EN_MSG_TYPE_CHAT_POPUP_SESSION",
}

var MsgType_value = map[string]int32{
	"EN_INVALID_MSG_TYPE":                             0,
	"EN_MSG_TYPE_TEXT":                                1,
	"EN_MSG_TYPE_PIC":                                 2,
	"EN_MSG_TYPE_AUDIO":                               3,
	"EN_MSG_TYPE_SHARE":                               4,
	"EN_MSG_TYPE_DRAW_BACK":                           5,
	"EN_MSG_TYPE_CUSTOM_FACE":                         6,
	"EN_MSG_TYPE_SHARE_V2":                            7,
	"EN_MSG_TYPE_SYS_CANCEL":                          8,
	"EN_MSG_TYPE_MINI_PROGRAM":                        9,
	"EN_MSG_TYPE_NOTIFY_MSG":                          10,
	"EN_MSG_TYPE_VIDEO_CARD":                          11,
	"EN_MSG_TYPE_ARTICLE_CARD":                        12,
	"EN_MSG_TYPE_PICTURE_CARD":                        13,
	"EN_MSG_TYPE_COMMON_SHARE_CARD":                   14,
	"EN_MSG_TYPE_BIZ_MSG_TYPE":                        50,
	"EN_MSG_TYPE_MODIFY_MSG_TYPE":                     51,
	"EN_MSG_TYPE_GROUP_MEMBER_CHANGED":                101,
	"EN_MSG_TYPE_GROUP_STATUS_CHANGED":                102,
	"EN_MSG_TYPE_GROUP_DYNAMIC_CHANGED":               103,
	"EN_MSG_TYPE_GROUP_LIST_CHANGED":                  104,
	"EM_MSG_TYPE_FRIEND_LIST_CHANGED":                 105,
	"EN_MSG_TYPE_GROUP_DETAIL_CHANGED":                106,
	"EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED":           107,
	"EN_MSG_TYPE_NOTICE_WATCH_LIST":                   108,
	"EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED":           109,
	"EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED":              110,
	"EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED":          111,
	"EN_MSG_TYPE_NOTIFY_NEW_UP_RECIEVED":              112,
	"EN_MSG_TYPE_NOTIFY_NEW_REPLY_RECIEVED_V2":        113,
	"EN_MSG_TYPE_NOTIFY_NEW_AT_RECIEVED_V2":           114,
	"EN_MSG_TYPE_NOTIFY_NEW_PRAISE_RECIEVED_V2":       115,
	"EN_MSG_TYPE_GROUP_DETAIL_CHANGED_MULTI":          116,
	"EN_MSG_TYPE_GROUP_MEMBER_ROLE_CHANGED_MULTI":     117,
	"EN_MSG_TYPE_NOTIFY_ANTI_DISTURB":                 118,
	"EN_MSG_TYPE_SYS_GROUP_DISSOLVED":                 201,
	"EN_MSG_TYPE_SYS_GROUP_JOINED":                    202,
	"EN_MSG_TYPE_SYS_GROUP_MEMBER_EXITED":             203,
	"EN_MSG_TYPE_SYS_GROUP_ADMIN_FIRED":               204,
	"EN_MSG_TYPE_SYS_GROUP_MEMBER_KICKED":             205,
	"EN_MSG_TYPE_SYS_GROUP_ADMIN_KICK_OFF":            206,
	"EN_MSG_TYPE_SYS_GROUP_ADMIN_DUTY":                207,
	"EN_MSG_TYPE_SYS_GROUP_AUTO_CREATED":              208,
	"EN_MSG_TYPE_SYS_FRIEND_APPLY":                    210,
	"EN_MSG_TYPE_SYS_FRIEND_APPLY_ACK":                211,
	"EN_MSG_TYPE_SYS_GROUP_APPLY_FOR_JOINING":         212,
	"EN_MSG_TYPE_SYS_GROUP_ADMIN_ACCEPTED_USER_APPLY": 213,
	"EN_MSG_TYPE_CHAT_MEMBER_JOINED":                  301,
	"EN_MSG_TYPE_CHAT_MEMBER_EXITED":                  302,
	"EN_MSG_TYPE_CHAT_GROUP_FREEZED":                  303,
	"EN_MSG_TYPE_CHAT_GROUP_DISSOLVED":                304,
	"EN_MSG_TYPE_CHAT_GROUP_CREATED":                  305,
	"EN_MSG_TYPE_CHAT_POPUP_SESSION":                  306,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{3}
}

// 接收方类型
type RecverType int32

const (
	RecverType_EN_NO_MEANING        RecverType = 0
	RecverType_EN_RECVER_TYPE_PEER  RecverType = 1
	RecverType_EN_RECVER_TYPE_GROUP RecverType = 2
	RecverType_EN_RECVER_TYPE_PEERS RecverType = 3
)

var RecverType_name = map[int32]string{
	0: "EN_NO_MEANING",
	1: "EN_RECVER_TYPE_PEER",
	2: "EN_RECVER_TYPE_GROUP",
	3: "EN_RECVER_TYPE_PEERS",
}

var RecverType_value = map[string]int32{
	"EN_NO_MEANING":        0,
	"EN_RECVER_TYPE_PEER":  1,
	"EN_RECVER_TYPE_GROUP": 2,
	"EN_RECVER_TYPE_PEERS": 3,
}

func (x RecverType) String() string {
	return proto.EnumName(RecverType_name, int32(x))
}

func (RecverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{4}
}

//
type RelationLogType int32

const (
	RelationLogType_EN_INVALID_LOG_TYPE RelationLogType = 0
	RelationLogType_EN_ADD_FRIEND       RelationLogType = 1
	RelationLogType_EN_REMOVE_FRIEND    RelationLogType = 2
	RelationLogType_EN_JOIN_GROUP       RelationLogType = 3
	RelationLogType_EN_EXIT_GROUP       RelationLogType = 4
)

var RelationLogType_name = map[int32]string{
	0: "EN_INVALID_LOG_TYPE",
	1: "EN_ADD_FRIEND",
	2: "EN_REMOVE_FRIEND",
	3: "EN_JOIN_GROUP",
	4: "EN_EXIT_GROUP",
}

var RelationLogType_value = map[string]int32{
	"EN_INVALID_LOG_TYPE": 0,
	"EN_ADD_FRIEND":       1,
	"EN_REMOVE_FRIEND":    2,
	"EN_JOIN_GROUP":       3,
	"EN_EXIT_GROUP":       4,
}

func (x RelationLogType) String() string {
	return proto.EnumName(RelationLogType_name, int32(x))
}

func (RelationLogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{5}
}

//
type SESSION_TYPE int32

const (
	SESSION_TYPE_INVALID_SESSION_TYPE     SESSION_TYPE = 0
	SESSION_TYPE_UN_FOLD_SESSION          SESSION_TYPE = 1
	SESSION_TYPE_UN_FOLLOW_SINGLE_SESSION SESSION_TYPE = 2
	SESSION_TYPE_MY_GROUP_SESSION         SESSION_TYPE = 3
	SESSION_TYPE_ALL_SESSION              SESSION_TYPE = 4
)

var SESSION_TYPE_name = map[int32]string{
	0: "INVALID_SESSION_TYPE",
	1: "UN_FOLD_SESSION",
	2: "UN_FOLLOW_SINGLE_SESSION",
	3: "MY_GROUP_SESSION",
	4: "ALL_SESSION",
}

var SESSION_TYPE_value = map[string]int32{
	"INVALID_SESSION_TYPE":     0,
	"UN_FOLD_SESSION":          1,
	"UN_FOLLOW_SINGLE_SESSION": 2,
	"MY_GROUP_SESSION":         3,
	"ALL_SESSION":              4,
}

func (x SESSION_TYPE) String() string {
	return proto.EnumName(SESSION_TYPE_name, int32(x))
}

func (SESSION_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{6}
}

//
type AccountInfo struct {
	//
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//
	PicUrl               string   `protobuf:"bytes,2,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{0}
}

func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountInfo.Unmarshal(m, b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return xxx_messageInfo_AccountInfo.Size(m)
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

func (m *AccountInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountInfo) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

//
type FriendRelation struct {
	// 用户mid
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 用户昵称
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 头像url
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face,omitempty"`
	// vip类型
	// 0:无 1:月度大会员 2:年度大会员
	VipLevel             uint32   `protobuf:"varint,4,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FriendRelation) Reset()         { *m = FriendRelation{} }
func (m *FriendRelation) String() string { return proto.CompactTextString(m) }
func (*FriendRelation) ProtoMessage()    {}
func (*FriendRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{1}
}

func (m *FriendRelation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FriendRelation.Unmarshal(m, b)
}
func (m *FriendRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FriendRelation.Marshal(b, m, deterministic)
}
func (m *FriendRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendRelation.Merge(m, src)
}
func (m *FriendRelation) XXX_Size() int {
	return xxx_messageInfo_FriendRelation.Size(m)
}
func (m *FriendRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendRelation.DiscardUnknown(m)
}

var xxx_messageInfo_FriendRelation proto.InternalMessageInfo

func (m *FriendRelation) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FriendRelation) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *FriendRelation) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *FriendRelation) GetVipLevel() uint32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

//
type GroupRelation struct {
	//
	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	//
	OwnerUid uint64 `protobuf:"varint,2,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	//
	GroupType uint32 `protobuf:"varint,3,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
	//
	GroupLevel uint32 `protobuf:"varint,4,opt,name=group_level,json=groupLevel,proto3" json:"group_level,omitempty"`
	//
	GroupCover string `protobuf:"bytes,5,opt,name=group_cover,json=groupCover,proto3" json:"group_cover,omitempty"`
	//
	GroupName string `protobuf:"bytes,6,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	//
	GroupNotice string `protobuf:"bytes,7,opt,name=group_notice,json=groupNotice,proto3" json:"group_notice,omitempty"`
	//
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//
	MemberRole int32 `protobuf:"varint,9,opt,name=member_role,json=memberRole,proto3" json:"member_role,omitempty"`
	//
	FansMedalName string `protobuf:"bytes,10,opt,name=fans_medal_name,json=fansMedalName,proto3" json:"fans_medal_name,omitempty"`
	//
	RoomId               uint64   `protobuf:"varint,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupRelation) Reset()         { *m = GroupRelation{} }
func (m *GroupRelation) String() string { return proto.CompactTextString(m) }
func (*GroupRelation) ProtoMessage()    {}
func (*GroupRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{2}
}

func (m *GroupRelation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupRelation.Unmarshal(m, b)
}
func (m *GroupRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupRelation.Marshal(b, m, deterministic)
}
func (m *GroupRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRelation.Merge(m, src)
}
func (m *GroupRelation) XXX_Size() int {
	return xxx_messageInfo_GroupRelation.Size(m)
}
func (m *GroupRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRelation.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRelation proto.InternalMessageInfo

func (m *GroupRelation) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupRelation) GetOwnerUid() uint64 {
	if m != nil {
		return m.OwnerUid
	}
	return 0
}

func (m *GroupRelation) GetGroupType() uint32 {
	if m != nil {
		return m.GroupType
	}
	return 0
}

func (m *GroupRelation) GetGroupLevel() uint32 {
	if m != nil {
		return m.GroupLevel
	}
	return 0
}

func (m *GroupRelation) GetGroupCover() string {
	if m != nil {
		return m.GroupCover
	}
	return ""
}

func (m *GroupRelation) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *GroupRelation) GetGroupNotice() string {
	if m != nil {
		return m.GroupNotice
	}
	return ""
}

func (m *GroupRelation) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GroupRelation) GetMemberRole() int32 {
	if m != nil {
		return m.MemberRole
	}
	return 0
}

func (m *GroupRelation) GetFansMedalName() string {
	if m != nil {
		return m.FansMedalName
	}
	return ""
}

func (m *GroupRelation) GetRoomId() uint64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 关键词高亮文本
type HighText struct {
	//
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// 表示高亮文本应该高亮第几个匹配的文本，ps：比如，“有疑问请联系客服，联系客服时，请说明具体的情况”，一共有2个匹配的文本，要高亮第一个匹配的，则index=1
	Index                uint32   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HighText) Reset()         { *m = HighText{} }
func (m *HighText) String() string { return proto.CompactTextString(m) }
func (*HighText) ProtoMessage()    {}
func (*HighText) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{3}
}

func (m *HighText) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HighText.Unmarshal(m, b)
}
func (m *HighText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HighText.Marshal(b, m, deterministic)
}
func (m *HighText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighText.Merge(m, src)
}
func (m *HighText) XXX_Size() int {
	return xxx_messageInfo_HighText.Size(m)
}
func (m *HighText) XXX_DiscardUnknown() {
	xxx_messageInfo_HighText.DiscardUnknown(m)
}

var xxx_messageInfo_HighText proto.InternalMessageInfo

func (m *HighText) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *HighText) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HighText) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

//
type ImgInfo struct {
	//
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	//
	Width int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	//
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	//
	ImageType            string   `protobuf:"bytes,4,opt,name=imageType,proto3" json:"imageType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImgInfo) Reset()         { *m = ImgInfo{} }
func (m *ImgInfo) String() string { return proto.CompactTextString(m) }
func (*ImgInfo) ProtoMessage()    {}
func (*ImgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{4}
}

func (m *ImgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImgInfo.Unmarshal(m, b)
}
func (m *ImgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImgInfo.Marshal(b, m, deterministic)
}
func (m *ImgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImgInfo.Merge(m, src)
}
func (m *ImgInfo) XXX_Size() int {
	return xxx_messageInfo_ImgInfo.Size(m)
}
func (m *ImgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImgInfo proto.InternalMessageInfo

func (m *ImgInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ImgInfo) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ImgInfo) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImgInfo) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

// 关键词命中信息
type KeyHitInfos struct {
	//
	Toast string `protobuf:"bytes,1,opt,name=toast,proto3" json:"toast,omitempty"`
	//
	RuleId uint32 `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	//
	HighText             []*HighText `protobuf:"bytes,3,rep,name=high_text,json=highText,proto3" json:"high_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KeyHitInfos) Reset()         { *m = KeyHitInfos{} }
func (m *KeyHitInfos) String() string { return proto.CompactTextString(m) }
func (*KeyHitInfos) ProtoMessage()    {}
func (*KeyHitInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{5}
}

func (m *KeyHitInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyHitInfos.Unmarshal(m, b)
}
func (m *KeyHitInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyHitInfos.Marshal(b, m, deterministic)
}
func (m *KeyHitInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyHitInfos.Merge(m, src)
}
func (m *KeyHitInfos) XXX_Size() int {
	return xxx_messageInfo_KeyHitInfos.Size(m)
}
func (m *KeyHitInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyHitInfos.DiscardUnknown(m)
}

var xxx_messageInfo_KeyHitInfos proto.InternalMessageInfo

func (m *KeyHitInfos) GetToast() string {
	if m != nil {
		return m.Toast
	}
	return ""
}

func (m *KeyHitInfos) GetRuleId() uint32 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *KeyHitInfos) GetHighText() []*HighText {
	if m != nil {
		return m.HighText
	}
	return nil
}

//
type Medal struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	//
	MedalId int32 `protobuf:"varint,2,opt,name=medal_id,json=medalId,proto3" json:"medal_id,omitempty"`
	//
	Level int32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	//
	MedalName string `protobuf:"bytes,4,opt,name=medal_name,json=medalName,proto3" json:"medal_name,omitempty"`
	//
	Score int32 `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	//
	Intimacy int32 `protobuf:"varint,6,opt,name=intimacy,proto3" json:"intimacy,omitempty"`
	//
	MasterStatus int32 `protobuf:"varint,7,opt,name=master_status,json=masterStatus,proto3" json:"master_status,omitempty"`
	//
	IsReceive int32 `protobuf:"varint,8,opt,name=is_receive,json=isReceive,proto3" json:"is_receive,omitempty"`
	//
	MedalColorStart int64 `protobuf:"varint,9,opt,name=medal_color_start,json=medalColorStart,proto3" json:"medal_color_start,omitempty"`
	//
	MedalColorEnd int64 `protobuf:"varint,10,opt,name=medal_color_end,json=medalColorEnd,proto3" json:"medal_color_end,omitempty"`
	//
	MedalColorBorder int64 `protobuf:"varint,11,opt,name=medal_color_border,json=medalColorBorder,proto3" json:"medal_color_border,omitempty"`
	//
	MedalColorName int64 `protobuf:"varint,12,opt,name=medal_color_name,json=medalColorName,proto3" json:"medal_color_name,omitempty"`
	//
	MedalColorLevel int64 `protobuf:"varint,13,opt,name=medal_color_level,json=medalColorLevel,proto3" json:"medal_color_level,omitempty"`
	//
	GuardLevel           int64    `protobuf:"varint,14,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Medal) Reset()         { *m = Medal{} }
func (m *Medal) String() string { return proto.CompactTextString(m) }
func (*Medal) ProtoMessage()    {}
func (*Medal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{6}
}

func (m *Medal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Medal.Unmarshal(m, b)
}
func (m *Medal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Medal.Marshal(b, m, deterministic)
}
func (m *Medal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Medal.Merge(m, src)
}
func (m *Medal) XXX_Size() int {
	return xxx_messageInfo_Medal.Size(m)
}
func (m *Medal) XXX_DiscardUnknown() {
	xxx_messageInfo_Medal.DiscardUnknown(m)
}

var xxx_messageInfo_Medal proto.InternalMessageInfo

func (m *Medal) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Medal) GetMedalId() int32 {
	if m != nil {
		return m.MedalId
	}
	return 0
}

func (m *Medal) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Medal) GetMedalName() string {
	if m != nil {
		return m.MedalName
	}
	return ""
}

func (m *Medal) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Medal) GetIntimacy() int32 {
	if m != nil {
		return m.Intimacy
	}
	return 0
}

func (m *Medal) GetMasterStatus() int32 {
	if m != nil {
		return m.MasterStatus
	}
	return 0
}

func (m *Medal) GetIsReceive() int32 {
	if m != nil {
		return m.IsReceive
	}
	return 0
}

func (m *Medal) GetMedalColorStart() int64 {
	if m != nil {
		return m.MedalColorStart
	}
	return 0
}

func (m *Medal) GetMedalColorEnd() int64 {
	if m != nil {
		return m.MedalColorEnd
	}
	return 0
}

func (m *Medal) GetMedalColorBorder() int64 {
	if m != nil {
		return m.MedalColorBorder
	}
	return 0
}

func (m *Medal) GetMedalColorName() int64 {
	if m != nil {
		return m.MedalColorName
	}
	return 0
}

func (m *Medal) GetMedalColorLevel() int64 {
	if m != nil {
		return m.MedalColorLevel
	}
	return 0
}

func (m *Medal) GetGuardLevel() int64 {
	if m != nil {
		return m.GuardLevel
	}
	return 0
}

//
type Msg struct {
	// 发送方mid
	SenderUid uint64 `protobuf:"varint,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	// 接收方类型
	ReceiverType RecverType `protobuf:"varint,2,opt,name=receiver_type,json=receiverType,proto3,enum=bilibili.im.type.RecverType" json:"receiver_type,omitempty"`
	// 接收方mid
	ReceiverId uint64 `protobuf:"varint,3,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// 客户端的序列id,用于服务端去重
	CliMsgId uint64 `protobuf:"varint,4,opt,name=cli_msg_id,json=cliMsgId,proto3" json:"cli_msg_id,omitempty"`
	// 消息类型
	MsgType MsgType `protobuf:"varint,5,opt,name=msg_type,json=msgType,proto3,enum=bilibili.im.type.MsgType" json:"msg_type,omitempty"`
	// 消息内容
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// 服务端的序列号x
	MsgSeqno uint64 `protobuf:"varint,7,opt,name=msg_seqno,json=msgSeqno,proto3" json:"msg_seqno,omitempty"`
	// 消息发送时间（服务端时间）
	Timestamp uint64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// @用户列表
	AtUids []uint64 `protobuf:"varint,9,rep,packed,name=at_uids,json=atUids,proto3" json:"at_uids,omitempty"`
	// 多人消息
	RecverIds []uint64 `protobuf:"varint,10,rep,packed,name=recver_ids,json=recverIds,proto3" json:"recver_ids,omitempty"`
	// 消息唯一标示
	MsgKey uint64 `protobuf:"varint,11,opt,name=msg_key,json=msgKey,proto3" json:"msg_key,omitempty"`
	// 消息状态
	MsgStatus uint32 `protobuf:"varint,12,opt,name=msg_status,json=msgStatus,proto3" json:"msg_status,omitempty"`
	// 是否为系统撤销
	SysCancel bool `protobuf:"varint,13,opt,name=sys_cancel,json=sysCancel,proto3" json:"sys_cancel,omitempty"`
	// 通知码
	NotifyCode string `protobuf:"bytes,14,opt,name=notify_code,json=notifyCode,proto3" json:"notify_code,omitempty"`
	// 消息来源
	MsgSource MsgSource `protobuf:"varint,15,opt,name=msg_source,json=msgSource,proto3,enum=bilibili.im.type.MsgSource" json:"msg_source,omitempty"`
	// 如果msg.content有表情字符，则该参数需要置为1
	NewFaceVersion int32 `protobuf:"varint,16,opt,name=new_face_version,json=newFaceVersion,proto3" json:"new_face_version,omitempty"`
	// 命中关键词信息
	KeyHitInfos          *KeyHitInfos `protobuf:"bytes,17,opt,name=key_hit_infos,json=keyHitInfos,proto3" json:"key_hit_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{7}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetSenderUid() uint64 {
	if m != nil {
		return m.SenderUid
	}
	return 0
}

func (m *Msg) GetReceiverType() RecverType {
	if m != nil {
		return m.ReceiverType
	}
	return RecverType_EN_NO_MEANING
}

func (m *Msg) GetReceiverId() uint64 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

func (m *Msg) GetCliMsgId() uint64 {
	if m != nil {
		return m.CliMsgId
	}
	return 0
}

func (m *Msg) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_EN_INVALID_MSG_TYPE
}

func (m *Msg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Msg) GetMsgSeqno() uint64 {
	if m != nil {
		return m.MsgSeqno
	}
	return 0
}

func (m *Msg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Msg) GetAtUids() []uint64 {
	if m != nil {
		return m.AtUids
	}
	return nil
}

func (m *Msg) GetRecverIds() []uint64 {
	if m != nil {
		return m.RecverIds
	}
	return nil
}

func (m *Msg) GetMsgKey() uint64 {
	if m != nil {
		return m.MsgKey
	}
	return 0
}

func (m *Msg) GetMsgStatus() uint32 {
	if m != nil {
		return m.MsgStatus
	}
	return 0
}

func (m *Msg) GetSysCancel() bool {
	if m != nil {
		return m.SysCancel
	}
	return false
}

func (m *Msg) GetNotifyCode() string {
	if m != nil {
		return m.NotifyCode
	}
	return ""
}

func (m *Msg) GetMsgSource() MsgSource {
	if m != nil {
		return m.MsgSource
	}
	return MsgSource_EN_MSG_SOURCE_UNKONW
}

func (m *Msg) GetNewFaceVersion() int32 {
	if m != nil {
		return m.NewFaceVersion
	}
	return 0
}

func (m *Msg) GetKeyHitInfos() *KeyHitInfos {
	if m != nil {
		return m.KeyHitInfos
	}
	return nil
}

//
type RelationLog struct {
	// 操作类型
	LogType RelationLogType `protobuf:"varint,1,opt,name=log_type,json=logType,proto3,enum=bilibili.im.type.RelationLogType" json:"log_type,omitempty"`
	// 操作seqno
	OplogSeqno uint64 `protobuf:"varint,2,opt,name=oplog_seqno,json=oplogSeqno,proto3" json:"oplog_seqno,omitempty"`
	// 好友信息
	FriendRelation *FriendRelation `protobuf:"bytes,3,opt,name=friend_relation,json=friendRelation,proto3" json:"friend_relation,omitempty"`
	// 群信息
	GroupRelation        *GroupRelation `protobuf:"bytes,4,opt,name=group_relation,json=groupRelation,proto3" json:"group_relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RelationLog) Reset()         { *m = RelationLog{} }
func (m *RelationLog) String() string { return proto.CompactTextString(m) }
func (*RelationLog) ProtoMessage()    {}
func (*RelationLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{8}
}

func (m *RelationLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelationLog.Unmarshal(m, b)
}
func (m *RelationLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelationLog.Marshal(b, m, deterministic)
}
func (m *RelationLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationLog.Merge(m, src)
}
func (m *RelationLog) XXX_Size() int {
	return xxx_messageInfo_RelationLog.Size(m)
}
func (m *RelationLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationLog.DiscardUnknown(m)
}

var xxx_messageInfo_RelationLog proto.InternalMessageInfo

func (m *RelationLog) GetLogType() RelationLogType {
	if m != nil {
		return m.LogType
	}
	return RelationLogType_EN_INVALID_LOG_TYPE
}

func (m *RelationLog) GetOplogSeqno() uint64 {
	if m != nil {
		return m.OplogSeqno
	}
	return 0
}

func (m *RelationLog) GetFriendRelation() *FriendRelation {
	if m != nil {
		return m.FriendRelation
	}
	return nil
}

func (m *RelationLog) GetGroupRelation() *GroupRelation {
	if m != nil {
		return m.GroupRelation
	}
	return nil
}

// 会话详情
type SessionInfo struct {
	//
	TalkerId uint64 `protobuf:"varint,1,opt,name=talker_id,json=talkerId,proto3" json:"talker_id,omitempty"`
	//
	SessionType uint32 `protobuf:"varint,2,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`
	//
	AtSeqno uint64 `protobuf:"varint,3,opt,name=at_seqno,json=atSeqno,proto3" json:"at_seqno,omitempty"`
	//
	TopTs uint64 `protobuf:"varint,4,opt,name=top_ts,json=topTs,proto3" json:"top_ts,omitempty"`
	//
	GroupName string `protobuf:"bytes,5,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	//
	GroupCover string `protobuf:"bytes,6,opt,name=group_cover,json=groupCover,proto3" json:"group_cover,omitempty"`
	//
	IsFollow uint32 `protobuf:"varint,7,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	//
	IsDnd uint32 `protobuf:"varint,8,opt,name=is_dnd,json=isDnd,proto3" json:"is_dnd,omitempty"`
	//
	AckSeqno uint64 `protobuf:"varint,9,opt,name=ack_seqno,json=ackSeqno,proto3" json:"ack_seqno,omitempty"`
	//
	AckTs uint64 `protobuf:"varint,10,opt,name=ack_ts,json=ackTs,proto3" json:"ack_ts,omitempty"`
	//
	SessionTs uint64 `protobuf:"varint,11,opt,name=session_ts,json=sessionTs,proto3" json:"session_ts,omitempty"`
	//
	UnreadCount uint32 `protobuf:"varint,12,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	//
	LastMsg *Msg `protobuf:"bytes,13,opt,name=last_msg,json=lastMsg,proto3" json:"last_msg,omitempty"`
	//
	GroupType uint32 `protobuf:"varint,14,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
	//
	CanFold uint32 `protobuf:"varint,15,opt,name=can_fold,json=canFold,proto3" json:"can_fold,omitempty"`
	//
	Status uint32 `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	//
	MaxSeqno uint64 `protobuf:"varint,17,opt,name=max_seqno,json=maxSeqno,proto3" json:"max_seqno,omitempty"`
	// 会话是否有业务通知
	NewPushMsg uint32 `protobuf:"varint,18,opt,name=new_push_msg,json=newPushMsg,proto3" json:"new_push_msg,omitempty"`
	// 接收方是否设置接受推送
	Setting uint32 `protobuf:"varint,19,opt,name=setting,proto3" json:"setting,omitempty"`
	//
	IsGuardian uint32 `protobuf:"varint,20,opt,name=is_guardian,json=isGuardian,proto3" json:"is_guardian,omitempty"`
	//
	IsIntercept int32 `protobuf:"varint,21,opt,name=is_intercept,json=isIntercept,proto3" json:"is_intercept,omitempty"`
	//
	IsTrust int32 `protobuf:"varint,22,opt,name=is_trust,json=isTrust,proto3" json:"is_trust,omitempty"`
	//
	SystemMsgType int32 `protobuf:"varint,23,opt,name=system_msg_type,json=systemMsgType,proto3" json:"system_msg_type,omitempty"`
	//
	AccountInfo *AccountInfo `protobuf:"bytes,24,opt,name=account_info,json=accountInfo,proto3" json:"account_info,omitempty"`
	//
	LiveStatus int32 `protobuf:"varint,25,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	//
	BizMsgUnreadCount int32 `protobuf:"varint,26,opt,name=biz_msg_unread_count,json=bizMsgUnreadCount,proto3" json:"biz_msg_unread_count,omitempty"`
	//
	UserLabel            *UserLabel `protobuf:"bytes,27,opt,name=user_label,json=userLabel,proto3" json:"user_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SessionInfo) Reset()         { *m = SessionInfo{} }
func (m *SessionInfo) String() string { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()    {}
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{9}
}

func (m *SessionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionInfo.Unmarshal(m, b)
}
func (m *SessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionInfo.Marshal(b, m, deterministic)
}
func (m *SessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionInfo.Merge(m, src)
}
func (m *SessionInfo) XXX_Size() int {
	return xxx_messageInfo_SessionInfo.Size(m)
}
func (m *SessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SessionInfo proto.InternalMessageInfo

func (m *SessionInfo) GetTalkerId() uint64 {
	if m != nil {
		return m.TalkerId
	}
	return 0
}

func (m *SessionInfo) GetSessionType() uint32 {
	if m != nil {
		return m.SessionType
	}
	return 0
}

func (m *SessionInfo) GetAtSeqno() uint64 {
	if m != nil {
		return m.AtSeqno
	}
	return 0
}

func (m *SessionInfo) GetTopTs() uint64 {
	if m != nil {
		return m.TopTs
	}
	return 0
}

func (m *SessionInfo) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *SessionInfo) GetGroupCover() string {
	if m != nil {
		return m.GroupCover
	}
	return ""
}

func (m *SessionInfo) GetIsFollow() uint32 {
	if m != nil {
		return m.IsFollow
	}
	return 0
}

func (m *SessionInfo) GetIsDnd() uint32 {
	if m != nil {
		return m.IsDnd
	}
	return 0
}

func (m *SessionInfo) GetAckSeqno() uint64 {
	if m != nil {
		return m.AckSeqno
	}
	return 0
}

func (m *SessionInfo) GetAckTs() uint64 {
	if m != nil {
		return m.AckTs
	}
	return 0
}

func (m *SessionInfo) GetSessionTs() uint64 {
	if m != nil {
		return m.SessionTs
	}
	return 0
}

func (m *SessionInfo) GetUnreadCount() uint32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *SessionInfo) GetLastMsg() *Msg {
	if m != nil {
		return m.LastMsg
	}
	return nil
}

func (m *SessionInfo) GetGroupType() uint32 {
	if m != nil {
		return m.GroupType
	}
	return 0
}

func (m *SessionInfo) GetCanFold() uint32 {
	if m != nil {
		return m.CanFold
	}
	return 0
}

func (m *SessionInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SessionInfo) GetMaxSeqno() uint64 {
	if m != nil {
		return m.MaxSeqno
	}
	return 0
}

func (m *SessionInfo) GetNewPushMsg() uint32 {
	if m != nil {
		return m.NewPushMsg
	}
	return 0
}

func (m *SessionInfo) GetSetting() uint32 {
	if m != nil {
		return m.Setting
	}
	return 0
}

func (m *SessionInfo) GetIsGuardian() uint32 {
	if m != nil {
		return m.IsGuardian
	}
	return 0
}

func (m *SessionInfo) GetIsIntercept() int32 {
	if m != nil {
		return m.IsIntercept
	}
	return 0
}

func (m *SessionInfo) GetIsTrust() int32 {
	if m != nil {
		return m.IsTrust
	}
	return 0
}

func (m *SessionInfo) GetSystemMsgType() int32 {
	if m != nil {
		return m.SystemMsgType
	}
	return 0
}

func (m *SessionInfo) GetAccountInfo() *AccountInfo {
	if m != nil {
		return m.AccountInfo
	}
	return nil
}

func (m *SessionInfo) GetLiveStatus() int32 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *SessionInfo) GetBizMsgUnreadCount() int32 {
	if m != nil {
		return m.BizMsgUnreadCount
	}
	return 0
}

func (m *SessionInfo) GetUserLabel() *UserLabel {
	if m != nil {
		return m.UserLabel
	}
	return nil
}

//
type UserLabel struct {
	//
	LabelType int32 `protobuf:"varint,1,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`
	//
	Medal *Medal `protobuf:"bytes,2,opt,name=medal,proto3" json:"medal,omitempty"`
	//
	GuardianRelation     int32    `protobuf:"varint,3,opt,name=guardian_relation,json=guardianRelation,proto3" json:"guardian_relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserLabel) Reset()         { *m = UserLabel{} }
func (m *UserLabel) String() string { return proto.CompactTextString(m) }
func (*UserLabel) ProtoMessage()    {}
func (*UserLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_e946430722bc99d4, []int{10}
}

func (m *UserLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserLabel.Unmarshal(m, b)
}
func (m *UserLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserLabel.Marshal(b, m, deterministic)
}
func (m *UserLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLabel.Merge(m, src)
}
func (m *UserLabel) XXX_Size() int {
	return xxx_messageInfo_UserLabel.Size(m)
}
func (m *UserLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLabel.DiscardUnknown(m)
}

var xxx_messageInfo_UserLabel proto.InternalMessageInfo

func (m *UserLabel) GetLabelType() int32 {
	if m != nil {
		return m.LabelType
	}
	return 0
}

func (m *UserLabel) GetMedal() *Medal {
	if m != nil {
		return m.Medal
	}
	return nil
}

func (m *UserLabel) GetGuardianRelation() int32 {
	if m != nil {
		return m.GuardianRelation
	}
	return 0
}

func init() {
	proto.RegisterEnum("bilibili.im.type.CmdId", CmdId_name, CmdId_value)
	proto.RegisterEnum("bilibili.im.type.ENUM_BIZ_MSG_TYPE", ENUM_BIZ_MSG_TYPE_name, ENUM_BIZ_MSG_TYPE_value)
	proto.RegisterEnum("bilibili.im.type.MsgSource", MsgSource_name, MsgSource_value)
	proto.RegisterEnum("bilibili.im.type.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("bilibili.im.type.RecverType", RecverType_name, RecverType_value)
	proto.RegisterEnum("bilibili.im.type.RelationLogType", RelationLogType_name, RelationLogType_value)
	proto.RegisterEnum("bilibili.im.type.SESSION_TYPE", SESSION_TYPE_name, SESSION_TYPE_value)
	proto.RegisterType((*AccountInfo)(nil), "bilibili.im.type.AccountInfo")
	proto.RegisterType((*FriendRelation)(nil), "bilibili.im.type.FriendRelation")
	proto.RegisterType((*GroupRelation)(nil), "bilibili.im.type.GroupRelation")
	proto.RegisterType((*HighText)(nil), "bilibili.im.type.HighText")
	proto.RegisterType((*ImgInfo)(nil), "bilibili.im.type.ImgInfo")
	proto.RegisterType((*KeyHitInfos)(nil), "bilibili.im.type.KeyHitInfos")
	proto.RegisterType((*Medal)(nil), "bilibili.im.type.Medal")
	proto.RegisterType((*Msg)(nil), "bilibili.im.type.Msg")
	proto.RegisterType((*RelationLog)(nil), "bilibili.im.type.RelationLog")
	proto.RegisterType((*SessionInfo)(nil), "bilibili.im.type.SessionInfo")
	proto.RegisterType((*UserLabel)(nil), "bilibili.im.type.UserLabel")
}

func init() {
	proto.RegisterFile("grpc_api/bilibili/im/type/im.proto", fileDescriptor_e946430722bc99d4)
}

var fileDescriptor_e946430722bc99d4 = []byte{
	// 2889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x59, 0x5b, 0x6f, 0x1b, 0xc7,
	0xf5, 0x37, 0x45, 0x51, 0x24, 0x87, 0xa2, 0x34, 0x1e, 0xdb, 0x31, 0x7d, 0x97, 0xe5, 0xc4, 0x96,
	0x95, 0xc4, 0xfe, 0x43, 0xc9, 0x1f, 0x05, 0x82, 0x0a, 0xe8, 0x6a, 0x77, 0x29, 0x6d, 0x45, 0x72,
	0x89, 0xd9, 0xa5, 0x14, 0xe5, 0x65, 0xb0, 0x26, 0x57, 0xd4, 0x56, 0xe4, 0x2e, 0xb3, 0xbb, 0x94,
	0xad, 0x3c, 0x16, 0x42, 0x1f, 0x8a, 0x3e, 0xe6, 0xa9, 0x40, 0x1f, 0xda, 0x02, 0x7d, 0xeb, 0xf5,
	0x1b, 0xc4, 0x6d, 0xd1, 0xe6, 0xd2, 0x26, 0xbd, 0x01, 0xfd, 0x00, 0xfd, 0x1e, 0x2d, 0xe6, 0xcc,
	0x2c, 0xb9, 0xa4, 0x68, 0x25, 0x0f, 0x02, 0x76, 0xce, 0xf9, 0xcd, 0xb9, 0x9f, 0x33, 0x07, 0x14,
	0x5a, 0xed, 0x86, 0x83, 0x36, 0x73, 0x06, 0xde, 0xd3, 0x67, 0x5e, 0xcf, 0xe3, 0x7f, 0x4f, 0xbd,
	0xfe, 0xd3, 0xf8, 0x74, 0xe0, 0x3e, 0xf5, 0xfa, 0x4f, 0x06, 0x61, 0x10, 0x07, 0x04, 0x27, 0xac,
	0x27, 0x5e, 0xff, 0x09, 0x67, 0xad, 0xbe, 0x87, 0x4a, 0x4a, 0xbb, 0x1d, 0x0c, 0xfd, 0xd8, 0xf0,
	0x0f, 0x03, 0x42, 0xd0, 0xbc, 0xef, 0xf4, 0xdd, 0x4a, 0x66, 0x25, 0xb3, 0x56, 0xa4, 0xf0, 0x4d,
	0xae, 0xa3, 0xfc, 0xc0, 0x6b, 0xb3, 0x61, 0xd8, 0xab, 0xcc, 0x01, 0x79, 0x61, 0xe0, 0xb5, 0x5b,
	0x61, 0x6f, 0x75, 0x80, 0x96, 0xaa, 0xa1, 0xe7, 0xfa, 0x1d, 0xea, 0xf6, 0x9c, 0xd8, 0x0b, 0x7c,
	0x82, 0x51, 0x76, 0xe8, 0x75, 0xe0, 0xf6, 0x3c, 0xe5, 0x9f, 0xe4, 0x16, 0x2a, 0x0e, 0x23, 0x37,
	0x64, 0x20, 0x55, 0x5c, 0x2f, 0x70, 0x42, 0x83, 0x4b, 0x26, 0x68, 0xfe, 0xd0, 0x69, 0xbb, 0x95,
	0xac, 0xd0, 0xc6, 0xbf, 0xf9, 0x85, 0x13, 0x6f, 0xc0, 0x7a, 0xee, 0x89, 0xdb, 0xab, 0xcc, 0xaf,
	0x64, 0xd6, 0xca, 0xb4, 0x70, 0xe2, 0x0d, 0x6a, 0xfc, 0xbc, 0xfa, 0x9f, 0x39, 0x54, 0xde, 0x0e,
	0x83, 0xe1, 0x60, 0xa4, 0xf1, 0x06, 0x2a, 0x74, 0x39, 0x81, 0x8d, 0xd4, 0xe6, 0xe1, 0x6c, 0x80,
	0xea, 0xe0, 0xb9, 0xef, 0x86, 0x8c, 0x9b, 0x34, 0x07, 0xbc, 0x02, 0x10, 0x5a, 0x5e, 0x87, 0xdc,
	0x41, 0x48, 0xdc, 0xe3, 0x51, 0x00, 0x03, 0xca, 0xb4, 0x08, 0x14, 0xfb, 0x74, 0xe0, 0x92, 0x7b,
	0xa8, 0x24, 0xd8, 0x69, 0x3b, 0xc4, 0x0d, 0xb0, 0x64, 0x0c, 0x68, 0x07, 0x27, 0x6e, 0x58, 0xc9,
	0x81, 0x07, 0x02, 0xa0, 0x72, 0xca, 0x58, 0x01, 0x78, 0xbe, 0x00, 0x7c, 0xa1, 0x00, 0x5c, 0xbf,
	0x8f, 0x16, 0x25, 0x3b, 0x88, 0xbd, 0xb6, 0x5b, 0xc9, 0x03, 0x40, 0xc8, 0x6c, 0x00, 0x89, 0xbc,
	0x86, 0x16, 0xa2, 0xd8, 0x89, 0x87, 0x51, 0xa5, 0xb0, 0x92, 0x59, 0xcb, 0x51, 0x79, 0xe2, 0xaa,
	0xfb, 0x6e, 0xff, 0x99, 0x1b, 0xb2, 0x30, 0xe8, 0xb9, 0x95, 0x22, 0x30, 0x91, 0x20, 0xd1, 0xa0,
	0xe7, 0x92, 0x87, 0x68, 0xf9, 0xd0, 0xf1, 0x23, 0xd6, 0x77, 0x3b, 0x4e, 0x4f, 0xe8, 0x47, 0x20,
	0xbe, 0xcc, 0xc9, 0x75, 0x4e, 0x6d, 0xc8, 0xc4, 0x86, 0x41, 0xd0, 0xe7, 0xa1, 0x2b, 0x41, 0x78,
	0x16, 0xf8, 0xd1, 0xe8, 0xac, 0xee, 0xa0, 0xc2, 0x8e, 0xd7, 0x3d, 0xb2, 0xdd, 0x17, 0x31, 0xb9,
	0x8a, 0x72, 0xb1, 0x17, 0xf7, 0x92, 0x92, 0x10, 0x07, 0x48, 0xf4, 0xa8, 0x1e, 0xf8, 0x27, 0xc7,
	0x79, 0x7e, 0xc7, 0x7d, 0x21, 0x63, 0x29, 0x0e, 0xab, 0x5d, 0x94, 0x37, 0xfa, 0x5d, 0x28, 0x2d,
	0x79, 0x25, 0x33, 0x71, 0xe5, 0xb9, 0xd7, 0x89, 0x8f, 0x40, 0x4c, 0x8e, 0x8a, 0x03, 0x77, 0xfb,
	0xc8, 0xf5, 0xba, 0x47, 0x31, 0x48, 0xca, 0x51, 0x79, 0x22, 0xb7, 0x51, 0xd1, 0xeb, 0x3b, 0x5d,
	0x97, 0xe7, 0x07, 0x12, 0x52, 0xa4, 0x63, 0xc2, 0xea, 0x10, 0x95, 0x76, 0xdd, 0xd3, 0x1d, 0x0f,
	0xca, 0x38, 0x02, 0xab, 0x03, 0x27, 0x8a, 0x47, 0x56, 0xf3, 0x03, 0x38, 0x3c, 0xec, 0xb9, 0x4c,
	0xd6, 0x43, 0x99, 0x2e, 0xf0, 0xa3, 0xd1, 0x21, 0xdf, 0x42, 0xc5, 0x23, 0xaf, 0x7b, 0xc4, 0x62,
	0xf7, 0x05, 0x57, 0x9b, 0x5d, 0x2b, 0x6d, 0xdc, 0x7c, 0x32, 0xdd, 0x2b, 0x4f, 0x92, 0x98, 0xd0,
	0xc2, 0x91, 0xfc, 0x5a, 0xfd, 0x77, 0x16, 0xe5, 0x20, 0xa0, 0xe9, 0xd2, 0xcf, 0x8a, 0xd2, 0xbf,
	0x81, 0x0a, 0x22, 0x03, 0x52, 0x5d, 0x8e, 0xe6, 0xe1, 0x6c, 0x74, 0xb8, 0x79, 0xa2, 0xb0, 0x84,
	0x8b, 0xe2, 0xc0, 0x4b, 0x26, 0x95, 0x32, 0xe9, 0x62, 0x7f, 0x94, 0xae, 0xab, 0x28, 0x17, 0xb5,
	0x83, 0xd0, 0x85, 0x62, 0xcb, 0x51, 0x71, 0x20, 0x37, 0x51, 0xc1, 0xf3, 0x63, 0xaf, 0xef, 0xb4,
	0x4f, 0xa1, 0xca, 0x72, 0x74, 0x74, 0x26, 0x0f, 0x50, 0xb9, 0xef, 0x44, 0xb1, 0x1b, 0x32, 0x59,
	0x48, 0x79, 0x00, 0x2c, 0x0a, 0xa2, 0x25, 0xca, 0xe9, 0x0e, 0x42, 0x5e, 0xc4, 0x42, 0xb7, 0xed,
	0x7a, 0x27, 0xae, 0x2c, 0xb5, 0xa2, 0x17, 0x51, 0x41, 0x20, 0xeb, 0xe8, 0xb2, 0x30, 0xaa, 0x1d,
	0xf4, 0x02, 0x10, 0x14, 0xc6, 0x50, 0x73, 0x59, 0xba, 0x0c, 0x0c, 0x95, 0xd3, 0x2d, 0x4e, 0xe6,
	0x85, 0x97, 0xc6, 0xba, 0x7e, 0x07, 0x0a, 0x2f, 0x4b, 0xcb, 0x63, 0xa4, 0xee, 0x77, 0xc8, 0x5b,
	0x88, 0xa4, 0x71, 0xcf, 0x82, 0xb0, 0xe3, 0x86, 0x50, 0x83, 0x59, 0x8a, 0xc7, 0xd0, 0x2d, 0xa0,
	0x93, 0x35, 0x84, 0xd3, 0x68, 0x08, 0xce, 0x22, 0x60, 0x97, 0xc6, 0x58, 0x88, 0xd0, 0x94, 0xad,
	0x22, 0xc4, 0xe5, 0x69, 0x5b, 0xc7, 0x0d, 0x3c, 0x74, 0xc2, 0x8e, 0x44, 0x2d, 0x01, 0x0a, 0x01,
	0x49, 0xcc, 0x9a, 0x1f, 0xe6, 0x50, 0xb6, 0x1e, 0x75, 0x79, 0x7c, 0x22, 0xd7, 0xef, 0xc8, 0x39,
	0x22, 0x66, 0x4c, 0x51, 0x50, 0xf8, 0x20, 0x51, 0x50, 0x59, 0xc6, 0x2e, 0x14, 0xb3, 0x84, 0xa7,
	0x7a, 0x69, 0xe3, 0xf6, 0xf9, 0xf2, 0xa1, 0x6e, 0xfb, 0xc4, 0x0d, 0x79, 0xb5, 0xd2, 0xc5, 0xe4,
	0x4a, 0x32, 0x6c, 0x46, 0x22, 0xbc, 0x0e, 0xd4, 0xc4, 0x3c, 0x45, 0x09, 0xc9, 0xe8, 0x90, 0xdb,
	0x08, 0xb5, 0x7b, 0x1e, 0xeb, 0x47, 0x5d, 0xce, 0x9f, 0x17, 0xa3, 0xac, 0xdd, 0xf3, 0xea, 0x51,
	0xd7, 0xe8, 0x90, 0x77, 0x51, 0x81, 0x73, 0x40, 0x79, 0x0e, 0x94, 0xdf, 0x38, 0xaf, 0xbc, 0x1e,
	0x75, 0x41, 0x73, 0xbe, 0x2f, 0x3e, 0x48, 0x05, 0xe5, 0xdb, 0x81, 0x1f, 0xbb, 0x7e, 0x2c, 0x87,
	0x53, 0x72, 0xe4, 0x73, 0x93, 0xcb, 0x8b, 0xdc, 0x0f, 0xfd, 0x00, 0x2a, 0x66, 0x9e, 0x72, 0x05,
	0x16, 0x3f, 0xf3, 0x2e, 0x8c, 0xbd, 0xbe, 0x1b, 0xc5, 0x4e, 0x7f, 0x00, 0xc5, 0x32, 0x4f, 0xc7,
	0x04, 0xde, 0x60, 0x4e, 0xcc, 0xe3, 0x14, 0x55, 0x8a, 0x2b, 0x59, 0x3e, 0x51, 0x9c, 0xb8, 0xe5,
	0x75, 0xa0, 0xc8, 0x42, 0x70, 0x9f, 0x71, 0x1e, 0x02, 0x5e, 0x51, 0x50, 0x8c, 0x4e, 0xc4, 0xef,
	0x71, 0x95, 0xc7, 0xee, 0x69, 0x32, 0x89, 0xfa, 0x51, 0x77, 0xd7, 0x3d, 0x85, 0x96, 0xe0, 0xb6,
	0x88, 0xf2, 0x5d, 0x14, 0x63, 0x9a, 0x1b, 0x33, 0xaa, 0xdd, 0xe8, 0x34, 0x62, 0x6d, 0xc7, 0x6f,
	0xcb, 0x4c, 0x17, 0x68, 0x31, 0x3a, 0x8d, 0x54, 0x20, 0xf0, 0xc0, 0xf2, 0xf1, 0x7a, 0x78, 0xca,
	0xda, 0x41, 0xc7, 0x85, 0x1c, 0x17, 0x29, 0x12, 0x24, 0x35, 0xe8, 0xb8, 0xe4, 0x3d, 0x29, 0x3e,
	0x18, 0x86, 0x6d, 0xb7, 0xb2, 0x0c, 0xc1, 0xbb, 0x35, 0x33, 0x78, 0x16, 0x40, 0x84, 0x6e, 0xf8,
	0xe4, 0x65, 0xe9, 0xbb, 0xcf, 0x19, 0x7f, 0xb4, 0xd8, 0x89, 0x1b, 0x46, 0x5e, 0xe0, 0x57, 0x30,
	0x74, 0xcf, 0x92, 0xef, 0x3e, 0xaf, 0x3a, 0x6d, 0x77, 0x4f, 0x50, 0x79, 0x89, 0x1c, 0xbb, 0xa7,
	0xec, 0xc8, 0x8b, 0x99, 0xc7, 0xa7, 0x53, 0xe5, 0xf2, 0x4a, 0x66, 0xad, 0xb4, 0x71, 0xe7, 0xbc,
	0xa2, 0xd4, 0x08, 0xa3, 0xa5, 0xe3, 0xf1, 0x61, 0xf5, 0xbf, 0x19, 0x54, 0x4a, 0xde, 0xbc, 0x5a,
	0xd0, 0x25, 0xdf, 0x46, 0x85, 0x5e, 0x20, 0x73, 0x9e, 0x01, 0xb3, 0xef, 0xcf, 0x2a, 0xb8, 0xd1,
	0x05, 0x91, 0xfb, 0x9e, 0xf8, 0xe0, 0x71, 0x09, 0x06, 0xfc, 0xbe, 0xc8, 0xb1, 0x78, 0x1b, 0x11,
	0x90, 0x44, 0x96, 0x0d, 0xb4, 0x7c, 0x08, 0x2f, 0x3b, 0x0b, 0xa5, 0x0c, 0xa8, 0xca, 0xd2, 0xc6,
	0xca, 0x79, 0x2d, 0x93, 0x2b, 0x00, 0x5d, 0x3a, 0x9c, 0x5c, 0x09, 0xaa, 0x68, 0x49, 0x3c, 0x74,
	0x23, 0x49, 0xf3, 0x20, 0xe9, 0xde, 0x79, 0x49, 0x13, 0x2f, 0x3b, 0x2d, 0x77, 0xd3, 0xc7, 0xd5,
	0x9f, 0xe4, 0x51, 0xc9, 0x72, 0x23, 0x1e, 0x50, 0x78, 0x4e, 0x6e, 0xa1, 0x62, 0xec, 0xf4, 0x8e,
	0x45, 0xcb, 0x88, 0xae, 0x2c, 0x08, 0x82, 0xd1, 0xe1, 0xaf, 0x6b, 0x24, 0xb0, 0xe3, 0x9e, 0x2c,
	0xd3, 0x92, 0xa4, 0x41, 0x0c, 0x6e, 0xa0, 0x82, 0x13, 0xcb, 0x00, 0x88, 0x8e, 0xcb, 0x3b, 0xb1,
	0xf0, 0xfe, 0x1a, 0x5a, 0x88, 0x83, 0x01, 0x8b, 0x23, 0xd9, 0x6a, 0xb9, 0x38, 0x18, 0xd8, 0xd1,
	0xd4, 0x8b, 0x9e, 0x9b, 0x7e, 0xd1, 0xa7, 0x36, 0x82, 0x85, 0x73, 0x1b, 0xc1, 0x2d, 0x54, 0xf4,
	0x22, 0x76, 0x18, 0xf4, 0x7a, 0xc1, 0x73, 0xe8, 0xab, 0x32, 0x2d, 0x78, 0x51, 0x15, 0xce, 0x5c,
	0xa7, 0x17, 0xb1, 0x8e, 0xdf, 0x81, 0xa6, 0xe2, 0xef, 0x67, 0xa4, 0xf9, 0xb0, 0xc3, 0x38, 0xed,
	0x63, 0x69, 0x66, 0x51, 0x78, 0xe9, 0xb4, 0x8f, 0x47, 0x76, 0x72, 0x66, 0x1c, 0xc1, 0x94, 0x9d,
	0xa7, 0x39, 0xa7, 0x7d, 0x2c, 0xec, 0x1c, 0x39, 0x1f, 0xc9, 0x7e, 0x2a, 0x26, 0xae, 0x47, 0x3c,
	0x36, 0x43, 0x3f, 0x74, 0x9d, 0x0e, 0x83, 0xb5, 0x4f, 0x36, 0x55, 0x49, 0xd0, 0x54, 0x4e, 0x22,
	0xff, 0x87, 0x0a, 0x3d, 0x27, 0x8a, 0xf9, 0xc0, 0x81, 0xa6, 0x2a, 0x6d, 0x5c, 0x9b, 0xd9, 0x14,
	0x34, 0xcf, 0x61, 0x72, 0x48, 0xa6, 0xd6, 0xa9, 0xa5, 0xe9, 0x75, 0xea, 0x06, 0x2a, 0xb4, 0x1d,
	0x9f, 0xfb, 0xde, 0x81, 0x2e, 0x2b, 0xd3, 0x7c, 0xdb, 0xf1, 0xab, 0x41, 0xaf, 0x93, 0xda, 0x72,
	0xb0, 0x78, 0x92, 0xe5, 0x96, 0xc3, 0xa7, 0x90, 0xf3, 0x42, 0x7a, 0x7e, 0x59, 0x4e, 0x21, 0xe7,
	0x85, 0xf0, 0x7c, 0x05, 0x2d, 0xf2, 0xde, 0x1b, 0x0c, 0xa3, 0x23, 0x30, 0x92, 0x88, 0xfd, 0xcc,
	0x77, 0x9f, 0x37, 0x87, 0xd1, 0x11, 0x37, 0xa8, 0x82, 0xf2, 0x91, 0x1b, 0xc7, 0x9e, 0xdf, 0xad,
	0x5c, 0x11, 0x0a, 0xe5, 0x91, 0xe7, 0xc9, 0x8b, 0x18, 0x0c, 0x7a, 0xcf, 0xf1, 0x2b, 0x57, 0xc5,
	0x55, 0x2f, 0xda, 0x96, 0x14, 0x1e, 0x20, 0x2f, 0x62, 0x9e, 0x1f, 0xbb, 0x61, 0xdb, 0x1d, 0xc4,
	0x95, 0x6b, 0xd0, 0xd4, 0x25, 0x2f, 0x32, 0x12, 0x12, 0xf7, 0xc7, 0x8b, 0x58, 0x1c, 0x0e, 0xa3,
	0xb8, 0xf2, 0x9a, 0x78, 0xda, 0xbd, 0xc8, 0xe6, 0x47, 0xfe, 0x06, 0x46, 0xa7, 0x51, 0xec, 0xf6,
	0xd9, 0x68, 0x28, 0x5f, 0x07, 0x44, 0x59, 0x90, 0xe5, 0x20, 0x26, 0xdf, 0x41, 0x8b, 0x8e, 0x58,
	0xbc, 0x61, 0x28, 0x54, 0x2a, 0xaf, 0x9a, 0x09, 0xa9, 0xf5, 0x9c, 0x96, 0x9c, 0xd4, 0xae, 0x7e,
	0x0f, 0x95, 0x7a, 0xde, 0x89, 0x9b, 0x0c, 0xc7, 0x1b, 0x62, 0x0f, 0xe4, 0x24, 0x39, 0x1d, 0x9f,
	0xa2, 0xab, 0xcf, 0xbc, 0x8f, 0xc0, 0x8e, 0x89, 0x8c, 0xdf, 0x04, 0xe4, 0xe5, 0x67, 0xde, 0x47,
	0xf5, 0xa8, 0xdb, 0x4a, 0xe5, 0xfd, 0x3d, 0x84, 0x60, 0x59, 0xef, 0x39, 0xcf, 0xdc, 0x5e, 0xe5,
	0x16, 0x58, 0x34, 0x63, 0x1c, 0xb6, 0x22, 0x37, 0xac, 0x71, 0x08, 0x85, 0xdd, 0x1e, 0x3e, 0x57,
	0x7f, 0x90, 0x41, 0xc5, 0x11, 0x83, 0xd7, 0x03, 0x08, 0x19, 0x4f, 0xa8, 0x1c, 0x2d, 0x02, 0x05,
	0x9c, 0x7f, 0x1b, 0xe5, 0xe0, 0x3d, 0x86, 0xc6, 0x2c, 0x6d, 0x5c, 0x9f, 0x51, 0x5d, 0x9c, 0x4d,
	0x05, 0x8a, 0xbc, 0x89, 0x2e, 0x27, 0xf9, 0x9a, 0x1c, 0x48, 0x39, 0x8a, 0x13, 0x46, 0x32, 0x28,
	0xd6, 0x3f, 0x5e, 0x40, 0x39, 0xb5, 0xdf, 0x31, 0x3a, 0xe4, 0x1a, 0xba, 0xac, 0x37, 0x98, 0x5a,
	0xd7, 0x98, 0xa1, 0x31, 0xa3, 0xb1, 0xa7, 0xd4, 0x0c, 0x0d, 0x5f, 0x22, 0x15, 0x44, 0xc6, 0x64,
	0x4b, 0x6f, 0x68, 0xac, 0x6e, 0x6d, 0xe3, 0x4f, 0x7e, 0xbc, 0x38, 0xc5, 0x39, 0x68, 0xa8, 0xc0,
	0xf9, 0xe9, 0xcb, 0xbb, 0xe4, 0x0e, 0xba, 0x3e, 0xc5, 0xa1, 0x7a, 0x4d, 0xb1, 0x0d, 0xb3, 0x81,
	0x7f, 0xf6, 0xf2, 0xee, 0x8c, 0x8b, 0x8a, 0xba, 0x8b, 0x7f, 0xfe, 0xf2, 0x2e, 0x79, 0x84, 0xee,
	0x4f, 0x71, 0xaa, 0xba, 0xad, 0xee, 0x30, 0x4b, 0xb7, 0x2c, 0xc3, 0x6c, 0x70, 0x05, 0x16, 0xfe,
	0xc5, 0xcb, 0xbb, 0x64, 0x0d, 0xad, 0xa6, 0xad, 0x12, 0x5c, 0x6b, 0x8f, 0xb2, 0x6d, 0xdd, 0x4e,
	0xce, 0x16, 0xfe, 0xe4, 0x6c, 0xf3, 0xd5, 0xc8, 0x86, 0xbe, 0x3f, 0x46, 0xbe, 0xbc, 0x08, 0xa9,
	0xa8, 0xbb, 0x63, 0xe4, 0xef, 0xcf, 0x36, 0xc9, 0x43, 0xb4, 0x32, 0x1b, 0xd9, 0x6a, 0x6a, 0x8a,
	0xad, 0x83, 0x3b, 0x7f, 0x38, 0xdb, 0x24, 0x0f, 0xd0, 0x9d, 0xd9, 0x38, 0x4b, 0xb7, 0x99, 0x6d,
	0x36, 0xf1, 0x1f, 0xcf, 0x36, 0xc9, 0x3a, 0x7a, 0x7d, 0x36, 0x88, 0xea, 0x75, 0x73, 0x4f, 0x4f,
	0x48, 0xf8, 0x4f, 0x67, 0x9b, 0xe4, 0x31, 0x7a, 0xf0, 0x0a, 0x81, 0x46, 0x63, 0xbb, 0xa6, 0xb3,
	0x56, 0x83, 0xea, 0x8a, 0x86, 0xff, 0x7c, 0xb6, 0x49, 0xde, 0x44, 0x6f, 0xcc, 0x86, 0xd6, 0x0f,
	0xd8, 0x36, 0x35, 0x5b, 0xcd, 0x04, 0xfc, 0xe9, 0xd9, 0x26, 0x79, 0x1b, 0x3d, 0xba, 0xd0, 0xa1,
	0x56, 0xa3, 0x5a, 0xdb, 0x67, 0x00, 0xff, 0xec, 0x22, 0xd9, 0x42, 0xb0, 0x62, 0x59, 0x86, 0x05,
	0xc5, 0xf0, 0xf9, 0x45, 0x36, 0xf3, 0xb0, 0x8e, 0xa1, 0x5f, 0x5c, 0x14, 0x8a, 0xe4, 0x5b, 0xd3,
	0x6d, 0xc5, 0xa8, 0xe1, 0x2f, 0x2f, 0x32, 0x79, 0x4b, 0x49, 0x2a, 0x26, 0x81, 0x7f, 0xf5, 0xf5,
	0x70, 0x5a, 0x1f, 0x67, 0xf8, 0x6f, 0x67, 0x9b, 0xeb, 0x06, 0x6f, 0x86, 0x56, 0x9d, 0x6d, 0x19,
	0x1f, 0x70, 0xeb, 0x98, 0x7d, 0xd0, 0xd4, 0xc9, 0x75, 0x74, 0x25, 0x7d, 0x66, 0x0d, 0x93, 0xd6,
	0x95, 0x1a, 0xbe, 0x44, 0x6e, 0xa1, 0xeb, 0x13, 0x0c, 0x55, 0xa1, 0x1a, 0xdb, 0x33, 0x34, 0xdd,
	0xc4, 0x99, 0xf5, 0x8f, 0xb3, 0xa8, 0x38, 0x5a, 0x89, 0x48, 0x05, 0x5d, 0xd5, 0xa1, 0x8e, 0x99,
	0x65, 0xb6, 0xa8, 0xca, 0x43, 0xbb, 0x6b, 0x36, 0xf6, 0xf1, 0x25, 0xd9, 0x7f, 0x29, 0x8e, 0x61,
	0x5a, 0x38, 0x43, 0x6e, 0xa0, 0x6b, 0x93, 0x64, 0xa5, 0xa1, 0x51, 0xc3, 0xd4, 0xf0, 0x1c, 0xb9,
	0x8a, 0xf0, 0x24, 0x6b, 0xe7, 0xff, 0x71, 0xf6, 0x3c, 0xb5, 0xa9, 0xe2, 0x79, 0x6e, 0xe2, 0x24,
	0x75, 0x4b, 0x51, 0x77, 0x2d, 0x5b, 0xd9, 0xd6, 0x71, 0xee, 0xbc, 0xea, 0x2d, 0xe3, 0x03, 0xbc,
	0x70, 0x9e, 0xbc, 0xaf, 0x6f, 0xe1, 0x3c, 0x79, 0x04, 0x09, 0x4d, 0x5b, 0xd4, 0xb2, 0x4d, 0xaa,
	0x37, 0x6b, 0x07, 0x6c, 0xeb, 0x80, 0x55, 0xcd, 0x5a, 0xcd, 0xdc, 0xd7, 0x35, 0x5c, 0x20, 0xeb,
	0xe8, 0xe1, 0x05, 0x40, 0xaa, 0xab, 0xba, 0xb1, 0xa7, 0x43, 0xf2, 0x8b, 0x5f, 0x23, 0x74, 0x57,
	0x3f, 0xd8, 0x37, 0xa9, 0x66, 0x61, 0x44, 0xde, 0x80, 0x11, 0xf1, 0x2a, 0xe0, 0x9e, 0x79, 0xc0,
	0x5d, 0x2a, 0x91, 0x7b, 0xe8, 0xd6, 0x24, 0x6c, 0x4f, 0x65, 0x8a, 0x6d, 0x2b, 0xea, 0x0e, 0x28,
	0x5c, 0x5c, 0xff, 0xd1, 0x32, 0xca, 0x27, 0xaf, 0xcb, 0x75, 0x74, 0x45, 0x6f, 0x24, 0x33, 0x6f,
	0x94, 0x46, 0x7c, 0x29, 0x15, 0x4b, 0xc8, 0xab, 0xad, 0xbf, 0x6f, 0xe3, 0x0c, 0xb9, 0x82, 0x96,
	0xd3, 0xd4, 0xa6, 0xa1, 0xe2, 0xb9, 0x54, 0xb0, 0x80, 0xa8, 0xb4, 0x34, 0xc3, 0xc4, 0xd9, 0x69,
	0xb2, 0xb5, 0xa3, 0x50, 0x1d, 0xcf, 0xa7, 0xb2, 0x0a, 0x64, 0x8d, 0x2a, 0xfb, 0x90, 0x11, 0x9c,
	0x4b, 0x65, 0x4a, 0xd4, 0x52, 0xcb, 0xb2, 0xcd, 0x3a, 0xab, 0x2a, 0xaa, 0x8e, 0x17, 0x52, 0xe5,
	0x33, 0x16, 0xc7, 0xf6, 0x36, 0x70, 0x9e, 0xdc, 0x44, 0xaf, 0x4d, 0x70, 0x0e, 0x2c, 0xa6, 0x2a,
	0x0d, 0x55, 0xaf, 0xe1, 0x02, 0xb9, 0x8d, 0x2a, 0x69, 0x5e, 0xdd, 0x68, 0x18, 0xac, 0x49, 0xcd,
	0x6d, 0xaa, 0xd4, 0x71, 0x71, 0xfa, 0x66, 0xc3, 0xb4, 0x8d, 0xea, 0x01, 0x44, 0x09, 0x4d, 0xf3,
	0xa0, 0xa6, 0xa1, 0xbc, 0x71, 0x69, 0x5a, 0xaa, 0x42, 0x6d, 0x43, 0xad, 0x89, 0xe2, 0xc7, 0x8b,
	0xd3, 0xdc, 0xa6, 0xa1, 0xda, 0x2d, 0x2a, 0xb9, 0x65, 0x72, 0x1f, 0x26, 0xe3, 0xd8, 0x49, 0xb3,
	0x5e, 0xe7, 0xfd, 0x08, 0xee, 0x00, 0x64, 0x69, 0x5a, 0x40, 0xba, 0xc1, 0xf0, 0x46, 0x2a, 0xbf,
	0xc2, 0x25, 0x53, 0x93, 0x46, 0x0b, 0xc0, 0x3b, 0xe4, 0x75, 0x98, 0xd1, 0x23, 0x80, 0x98, 0x4c,
	0x75, 0xbd, 0xbe, 0xa5, 0x53, 0xa6, 0xee, 0x28, 0x8d, 0x6d, 0x5d, 0xc3, 0xee, 0x6c, 0x94, 0x65,
	0x2b, 0x76, 0xcb, 0x1a, 0xa1, 0x0e, 0x53, 0x35, 0x97, 0x42, 0x69, 0x07, 0x0d, 0xa5, 0x6e, 0xa8,
	0x23, 0x58, 0x97, 0xac, 0xa2, 0xbb, 0xe7, 0x61, 0x35, 0xc3, 0xb2, 0x47, 0x98, 0x23, 0xf2, 0x00,
	0xdd, 0xd3, 0xeb, 0x63, 0x4c, 0x95, 0x1a, 0xfc, 0x49, 0x9d, 0x00, 0x79, 0xb3, 0xad, 0x12, 0xc3,
	0x6c, 0x84, 0xfa, 0x1e, 0x79, 0x0c, 0x53, 0x78, 0xb6, 0x87, 0xd4, 0xe4, 0x99, 0x90, 0xd0, 0xe3,
	0xe9, 0x70, 0xf3, 0x14, 0xf3, 0x76, 0x86, 0xd1, 0xc7, 0x75, 0xe3, 0xde, 0xb4, 0x34, 0x59, 0x05,
	0xfc, 0x91, 0x14, 0xcd, 0x45, 0x75, 0xd5, 0xd0, 0xf7, 0x74, 0x0d, 0xf7, 0xc9, 0x43, 0x78, 0x28,
	0x67, 0x41, 0x15, 0x7b, 0x8c, 0xf3, 0x53, 0xfd, 0x3f, 0x8d, 0x6b, 0x52, 0xc5, 0xb0, 0xf4, 0x31,
	0x36, 0xb8, 0x40, 0x66, 0xab, 0x39, 0xc6, 0x0d, 0xc8, 0x5b, 0x68, 0xed, 0x1b, 0x99, 0xc9, 0x9b,
	0xe2, 0xc3, 0x0b, 0x9c, 0x4a, 0x59, 0xca, 0xa1, 0x21, 0x79, 0x1b, 0x3d, 0xfe, 0x66, 0xc6, 0x72,
	0x78, 0x34, 0xed, 0xdb, 0xac, 0x14, 0xb1, 0x7a, 0xab, 0x66, 0x1b, 0x38, 0x26, 0x4f, 0xd1, 0x9b,
	0xdf, 0x28, 0x51, 0xf2, 0xc2, 0x10, 0x8a, 0xe4, 0xbc, 0x2d, 0x4a, 0xc3, 0x36, 0x98, 0x66, 0x58,
	0x76, 0x8b, 0x6e, 0xe1, 0x13, 0xf2, 0xfa, 0x24, 0x88, 0x37, 0xbc, 0xb4, 0xc2, 0xb0, 0x2c, 0xb3,
	0xc6, 0xc3, 0xf5, 0x69, 0x86, 0xdc, 0x47, 0xb7, 0x67, 0xa3, 0xbe, 0x6b, 0x1a, 0x0d, 0x5d, 0xc3,
	0x9f, 0x65, 0xc8, 0xda, 0x68, 0xf4, 0x4e, 0x41, 0xa4, 0x89, 0xfa, 0xfb, 0x86, 0xad, 0x6b, 0xf8,
	0xf3, 0x0c, 0x79, 0x38, 0xd9, 0x07, 0x63, 0xa4, 0xa2, 0xd5, 0x8d, 0x06, 0xab, 0x1a, 0x54, 0xd7,
	0xf0, 0x17, 0x5f, 0x2f, 0x71, 0xd7, 0x50, 0x77, 0x75, 0x0d, 0xff, 0x25, 0x43, 0x1e, 0xc3, 0x8b,
	0xff, 0x4a, 0x89, 0x1c, 0xc8, 0xcc, 0x6a, 0x15, 0xff, 0x35, 0x43, 0xde, 0x98, 0x6c, 0x8a, 0x69,
	0xa8, 0xd6, 0xb2, 0x0f, 0xf0, 0x97, 0x19, 0xf2, 0x68, 0xb2, 0x90, 0x52, 0xb0, 0x96, 0x6d, 0x32,
	0x95, 0xea, 0x0a, 0x77, 0xe6, 0xab, 0x99, 0x91, 0x91, 0xdd, 0xa8, 0x34, 0x9b, 0xb5, 0x03, 0xfc,
	0xf7, 0x99, 0x2a, 0xd3, 0x10, 0xd8, 0xf3, 0xfe, 0x91, 0x21, 0x6f, 0xc1, 0x6e, 0x31, 0x4b, 0x25,
	0xa0, 0xaa, 0x26, 0x85, 0x68, 0x1b, 0x8d, 0x6d, 0xfc, 0xcf, 0x0c, 0x79, 0x17, 0x3d, 0xbd, 0xc8,
	0x0f, 0x45, 0x55, 0xf5, 0xa6, 0xad, 0x6b, 0xac, 0x65, 0xe9, 0x54, 0x9a, 0xf2, 0xaf, 0x0c, 0x79,
	0x30, 0x39, 0x5b, 0xd4, 0x1d, 0xc5, 0x4e, 0xa2, 0x29, 0x33, 0xf9, 0xcb, 0xb9, 0x8b, 0x40, 0x32,
	0x89, 0xbf, 0x9a, 0x0d, 0x12, 0x06, 0x54, 0xa9, 0xae, 0x7f, 0xa0, 0x6b, 0xf8, 0xd7, 0x73, 0xd3,
	0x9e, 0xa7, 0x40, 0xe3, 0xea, 0xfa, 0xcd, 0x45, 0xb2, 0x92, 0x40, 0xff, 0x76, 0x36, 0xa8, 0x69,
	0x36, 0xf9, 0xa0, 0x95, 0xab, 0xed, 0xef, 0xe6, 0xd6, 0x7b, 0x08, 0x8d, 0x7f, 0xf1, 0x23, 0x97,
	0x51, 0x59, 0x6f, 0xb0, 0x86, 0xc9, 0xea, 0xba, 0x02, 0x71, 0xbb, 0x24, 0xdf, 0x68, 0xaa, 0xab,
	0x7b, 0x3a, 0x95, 0x4f, 0x8a, 0xae, 0x53, 0x9c, 0x91, 0x4f, 0x62, 0x9a, 0x01, 0x16, 0xe0, 0xb9,
	0x19, 0x1c, 0x7e, 0xc5, 0xc2, 0xd9, 0xf5, 0x53, 0xb4, 0x3c, 0xf5, 0x73, 0xcf, 0xd4, 0x0e, 0x50,
	0x33, 0x47, 0x3b, 0x80, 0xb0, 0x45, 0xd1, 0x34, 0x99, 0x7b, 0x9c, 0x91, 0x6b, 0x81, 0xdc, 0xcf,
	0x25, 0x75, 0x4e, 0x02, 0x79, 0x36, 0xa4, 0x05, 0x59, 0x49, 0xe2, 0xb1, 0x97, 0xa4, 0xf9, 0xf5,
	0xef, 0x67, 0xd0, 0x62, 0xb2, 0x7f, 0xc2, 0x56, 0x59, 0x41, 0x57, 0x13, 0xad, 0x69, 0x3a, 0xbe,
	0xc4, 0xf7, 0x8c, 0x56, 0x83, 0x2f, 0x54, 0x23, 0x0e, 0xce, 0xf0, 0x67, 0x51, 0x10, 0x6b, 0xe6,
	0x7e, 0xb2, 0xf6, 0x27, 0x5c, 0x58, 0x09, 0x47, 0xfb, 0x7d, 0x42, 0xcd, 0x92, 0x65, 0x54, 0x52,
	0x6a, 0xb5, 0x11, 0x61, 0xfe, 0xd9, 0x02, 0xfc, 0x83, 0xeb, 0x9d, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0x1d, 0x2a, 0x2c, 0x06, 0x1b, 0x00, 0x00,
}
